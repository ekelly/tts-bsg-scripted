-- BSG Tachyon
-- Scripted BattleStar Galactica with all expansions.
-- Based on the work done by Flolania

-- Data for All Cards
-- Key = Name
-- Value = 1.Type, 2.Admiral Ranking, 3.President Ranking, 4.CAG Ranking, 5.Pawn location, 6.Colors=('TR','P','L','T','PI','E')[5/dual stats],
----  7.Expansion, 8.DualCharater=(bool,name), 9.Extra Loyalty=(bool)
local NCharData = {}
NCharData['Laura Roslin'] =               {'Polictical Leader',26,1,26, "President's Office",{0,3,2,0,0,0},'Base',    {false, 0},                      false}
NCharData['Gaius Baltar'] =               {'Polictical Leader',23,2,23, "Research Lab",      {0,2,1,0,0,1},'Base',    {true, 'Gaius "Support" Baltar'},true }
NCharData['Tom Zarek'] =                  {'Polictical Leader',20,4,20, "Administration",    {0,2,2,1,0,0},'Base',    {true, 'Tom "Military" Zarek'},  false}
NCharData['Ellen Tigh'] =                 {'Polictical Leader',21,7,21, "Admiral's Quarters",{1,2,2,0,0,0},'Pegasus', {false, 0},                      false}
NCharData['Tory Foster'] =                {'Polictical Leader',25,6,24, "Press Room",        {0,3,1,1,0,0},'Exodus',  {false, 0},                      false}
NCharData['Romo Lampkin'] =               {'Polictical Leader',24,5,25, "Administration",    {0,3,0,2,0,0},'Daybreak',{false, 0},                      false}
NCharData['Lee Adama'] =                  {'Polictical Leader',19,3,8,  "Admiral's Quarters",{0,5,5,1,2,0},'Daybreak',{true, 'Lee "Apollo" Adama'},    false}
NCharData['William Adama'] =              {'Military Leader',  2,11,10, "Admiral's Quarters",{0,0,3,2,0,0},'Base',    {false, 0},                      false}
NCharData['Saul Tigh'] =                  {'Military Leader',  3,22,12, "Command",           {0,0,2,3,0,0},'Base',    {false, 0},                      false}
NCharData['Karl Agathon'] =               {'Military Leader',  4,12,9,  "Stranded",          {0,0,2,2,1,0},'Base',    {true, 'Karl "Helo" Agathon'},   false}
NCharData['Helena Cain'] =                {'Military Leader',  1,17,11, "Pegasus CIC",       {0,0,7,7,0,0},'Pegasus', {false, 0},                      false}
NCharData['Felix Gaeta'] =                {'Military Leader',  5,10,13, "FTL Control",       {0,5,5,2,0,1},'Exodus',  {false, 0},                      false}
NCharData['Louis Hoshi'] =                {'Military Leader',  6,19,15, "Communications",    {0,0,2,2,0,1},'Daybreak',{false, 0},                      false}
NCharData['Tom "Military" Zarek'] =       {'Military Leader',  7,9,16,  "Weapons Control",   {0,2,2,1,0,0},'Daybreak',{true, 'Tom Zarek'},             false}
NCharData['Lee "Apollo" Adama'] =         {'Pilot',            8,8,1,   "Launch",            {0,5,5,1,2,0},'Base',    {true, 'Lee Adama'},             false}
NCharData['Kara "Starbuck" Thrace'] =     {'Pilot',            11,25,2, "Hanger Deck",       {0,0,5,2,2,5},'Base',    {false, 0},                      false}
NCharData['Sharon "Boomer" Valerii'] =    {'Pilot',            13,21,5, "Armory",            {0,0,0,2,2,1},'Base',    {false, 0},                      true }
NCharData['Louanne "Kat" Katraine'] =     {'Pilot',            12,26,3, "Hanger Deck",       {0,0,1,2,2,0},'Pegasus', {false, 0},                      false}
NCharData['Samuel T. Anders'] =           {'Pilot',            15,24,7, "Armory",            {0,0,2,7,5,0},'Exodus',  {false, 0},                      false}
NCharData['Brendan "Hot Dog" Costanza'] = {'Pilot',            14,23,6, "Hanger Deck",       {0,0,1,1,2,1},'Daybreak',{false, 0},                      false}
NCharData['Karl "Helo" Agathon'] =        {'Pilot',            10,20,4, "Admiral's Quarters",{0,0,2,2,1,0},'Daybreak',{true, 'Karl Agathon'},          false}
NCharData['"Chief" Galen Tyrol'] =        {'Support',          16,13,17,"Hanger Deck",       {0,1,2,0,0,2},'Base',    {false, 0},                      false}
NCharData['Anastasia "Dee" Dualla'] =     {'Support',          9,18,14, "Communications",    {0,0,1,3,0,1},'Pegasus', {false, 0},                      false}
NCharData['Callandra "Cally" Tyrol'] =    {'Support',          17,15,18,"Hanger Deck",       {0,1,1,1,0,2},'Exodus',  {false, 0},                      false}
NCharData['Sherman "Doc" Cottle'] =       {'Support',          18,16,19,"Research Lab",      {0,1,0,2,0,2},'Daybreak',{false, 0},                      false}
NCharData['Gaius "Support" Baltar'] =     {'Support',          22,14,22,"Admiral's Quarters",{0,2,2,0,0,1},'Daybreak',{true, 'Gaius Baltar'},          false}
NCharData['Leoben Conoy'] =               {'Cylon Leader',     27,27,27,"Human Fleet",       {5,5,0,0,0,5},'Pegasus', {false, 0},                      false}
NCharData["Simon O'Neill"] =              {'Cylon Leader',     27,27,27,"Cylon Fleet",       {5,0,0,5,0,5},'Daybreak',{false, 0},                      false}
NCharData['"Caprica" Six'] =              {'Cylon Leader',     27,27,27,"Caprica",           {5,0,5,0,0,5},'Pegasus', {false, 0},                      false}
NCharData['Sharon "Athena" Agathon'] =    {'Cylon Leader',     27,27,27,"Hanger Deck",       {0,0,5,0,5,5},'Daybreak',{false, 0},                      false}
NCharData['Cavil'] =                      {'Cylon Leader',     27,27,27,"Cylon Fleet",       {5,0,0,5,0,5},'Pegasus', {false, 0},                      false}
NCharData["D'Anna Biers"] =               {'Cylon Leader',     27,27,27,"Human Fleet",       {5,5,5,0,0,5},'Daybreak',{false, 0},                      false}
NCharData['Aaron Doral'] =                {'Cylon Leader',     27,27,27,"Caprica",           {5,5,0,5,0,0},'Daybreak',{false, 0},                      false}

-- Data for character pawn locations
local LocationData = {}
LocationData["President's Office"] = {{-8.65, 1.75, 9.24},Daybreak={-6.95, 1.75, 9.26}}
LocationData["Research Lab"] = {{1.80, 1.75, -2.92}}
LocationData["Administration"] =  {{-5.30, 1.75, 9.22},Daybreak={-3.45, 1.75, 9.26}}
LocationData["Admiral's Quarters"] =  {{-1.82, 1.75, -7.13}}
LocationData["Press Room"] =  {{-12.00, 1.75, 9.22},Daybreak={-10.45, 1.75, 9.26}}
LocationData["Command"] =  {{-5.60, 1.75, -7.18}}
LocationData["Stranded"] =  {{0,1.75,0}}
LocationData["Pegasus CIC"] =  {{22.70, 1.49, -12.23}}
LocationData["FTL Control"] =  {{-9.30, 1.75, -5.06}}
LocationData["Communications"] =  {{-1.90, 1.75, -2.91}}
LocationData["Weapons Control"] =  {{-5.60, 1.75, -2.91}}
LocationData["Launch"] =  {{0.00, 1.75, -13.12}}
LocationData["Hanger Deck"] =  {{1.85, 1.75, -7.17}}
LocationData["Armory"] =  {{5.50, 1.75, -5.01}}
LocationData["Human Fleet"] =  {{6.50, 1.75, 8.99}}
LocationData["Cylon Fleet"] =  {{4.10, 1.75, 8.99}}
LocationData["Caprica"] =  {{1.70, 1.75, 8.99}}

local LocationOffsets = {}
LocationOffsets[1] = {{0.0,0.0,0.0}}
LocationOffsets[2] = {{-0.6,0.0,0},{0.6,0.0,0}}
LocationOffsets[3] = {{0,0.0,0.4},{-1.2,0.0,-0.4},{1.2,0.0,-0.4}}
LocationOffsets[4] = {{-0.6,0.0,0.62},{0.6,0.0,0.62},{0.6,0.0,-0.62},{-0.6,0.0,-0.62}}
LocationOffsets[5] = {{0.0,0.0,0.0},{-1.2,0.0,0.62},{1.2,0.0,0.62},{1.2,0.0,-0.62},{-1.2,0.0,-0.62}}

local Objectives = {Base='Kobol',Pegasus='NewCaprica',Daybreak='Earth',Exodus='IonianNebula'}

local PlayerTable = {}

local fuelcount = 0
local foodcount = 0
local moralecount = 0
local populationcount = 0

local STARTING_FUEL = 8
local STARTING_FOOD = 8
local STARTING_MORALE = 10
local STARTING_POPULATION = 12

local FuelDisplay = {}
local FoodDisplay = {}
local MoraleDisplay = {}
local PopulationDisplay = {}

local selectedexpansion = {}
local selectedobjective = ''
local selectedpegasus = {}
local selecteddaybreak = {}
local selectedexodus = {}
local selecteddebugmode = false
local selectedfirstplayer = 0

local JumpLocation = 0
local CylonJumpLocation = 0

local SCStateEnum = { startcheck=0, inprogress=1, layout=2, returncards=3 }

local skillcheck_startingplayer = -1
local skillcheck_currentplayer = 0
local skillcheck_counter = 0
local skillcheck_state = SCStateEnum.startcheck
local skillcheck_destinybutton = true

local PassButton = {['click_function'] = 'Pass', ['label'] = 'Done or Pass', ['position'] = {0, 0.6, 6}, ['rotation'] =  {0, 0, 0}, ['width'] = 2050, ['height'] = 650, ['font_size'] = 350}

local MainBoardObj = nil
local SCBoardTriggerObj = nil
local FirstPlayerDie = nil

local TitlesEnum = { admiral=1, president=2, cag=3 }

local BroadCastMessage = false

local PilotTokensBag = '15df45'
local AdditionalComponentsBox='226647'
local DiscardBox='0bdb34'

function print_r ( t )
    local print_r_cache={}
    local function sub_print_r(t,indent)
        if (print_r_cache[tostring(t)]) then
            print(indent.."*"..tostring(t))
        else
            print_r_cache[tostring(t)]=true
            if (type(t)=="table") then
                local tLen = #t
                for i = 1, tLen do
                    local val = t[i]
                    if (type(val)=="table") then
                        print(indent.."#("..i..") => "..tostring(t).." {")
                        sub_print_r(val,indent..string.rep(" ",string.len(i)+8))
                        print(indent..string.rep(" ",string.len(i)+6).."}")
                    elseif (type(val)=="string") then
                        print(indent.."#("..i..') => "'..val..'"')
                    else
                        print(indent.."#("..i..") => "..tostring(val))
                    end
                end
                for pos,val in pairs(t) do
                    if type(pos) ~= "number" or math.floor(pos) ~= pos or (pos < 1 or pos > tLen) then
                        if (type(val)=="table") then
                            print(indent.."("..pos..") => "..tostring(t).." {")
                            sub_print_r(val,indent..string.rep(" ",string.len(pos)+8))
                            print(indent..string.rep(" ",string.len(pos)+6).."}")
                        elseif (type(val)=="string") then
                            print(indent.."("..pos..') => "'..val..'"')
                        else
                            print(indent.."("..pos..") => "..tostring(val))
                        end
                    end
                end
            else
                print(indent..tostring(t))
            end
        end
    end

    if t == nil then
        print('nil')
    elseif (type(t)=="table") then
        print(tostring(t).." {")
        sub_print_r(t,"  ")
        print("}")
    else
        sub_print_r(t,"  ")
    end

    print()
end

function onPlayerTurnStart(player_color_start, player_color_previous)
    local num_players = #PlayerTable
    for i = 1, num_players, 1 do
        if PlayerTable[i].PlayerColor == player_color_start then
            skillcheck_startingplayer = i
            break
        end
    end
end

function onScriptingButtonDown(index, player_color)
    local hoverObj = Player[player_color].getHoverObject()
    -- Scripting button 1 while hovering over a skill card returns it to the skill deck
    if hoverObj.name == 'Card' and index == 1 then
        returnCardToDeck(hoverObj)
    end
end

function returnCardToDeck(obj)
    local Cards = {'TR','P','L','T','PI','E'}
    local CardsPos = {-11, -6.2, -1.3, 3.35, 8.1, 12.9}
    for y = 1, 6, 1 do
        if obj.getDescription() == Cards[y] then
            obj.setPosition({CardsPos[y], 1.3, -20})
        end
    end
end

--Runs any time the board is saved
function onSave()
    --We make a table of data we want to save. WE CAN ONLY SAVE 1 TABLE.
    local data_to_save = {}
    local players_to_save = {}
    local num_players = #PlayerTable
    for i=1,num_players,1 do
        local playerInfo={}
        if PlayerTable[i]["Object"] ~= nil then
            playerInfo["Object"] = PlayerTable[i]["Object"].getGUID()
            playerInfo["Data"] = PlayerTable[i]["Object"].getTable('Data')
        end
        playerInfo["PlayerColor"] = PlayerTable[i].PlayerColor
        table.insert(players_to_save,playerInfo)
    end
    data_to_save["PlayerTable"] = players_to_save

    data_to_save["Fuel"] = fuelcount
    data_to_save["Food"] = foodcount
    data_to_save["Morale"] = moralecount
    data_to_save["Pop"] = populationcount

    data_to_save["Expansion"] = selectedexpansion
    data_to_save["Objective"] = selectedobjective
    data_to_save["Pegasus"] = selectedpegasus
    data_to_save["Daybreak"] = selecteddaybreak
    data_to_save["Exodus"] = selectedexodus
    data_to_save["FirstPlayer"] = selectedfirstplayer

    data_to_save["Jump"] = JumpLocation
    data_to_save["CylonJump"] = CylonJumpLocation

    data_to_save["SCStartingPlayer"] = skillcheck_startingplayer
    data_to_save["SCCurrentPlayer"] = skillcheck_currentplayer
    data_to_save["SCCounter"] = skillcheck_counter
    data_to_save["SCState"] = skillcheck_state
    data_to_save["SCDestiny"] = skillcheck_destinybutton

    local settings = {BroadCastMessage=BroadCastMessage}
    data_to_save["Settings"] = settings

    --print_r(data_to_save)

    --We use this command to convert the table into a string
    saved_data = JSON.encode(data_to_save)
    --And this inserts the string into the save information for this script.
    return saved_data
    --Data is now saved.
end

function BroadcastCurrentSkillCheckPlayer(PlayerColor)
    local steam_name = Player[PlayerColor].steam_name
    if steam_name == nil then
        steam_name = PlayerColor
    end
    local text = 'Player ' .. steam_name .. ' Is On Deck For Skill Check'
    --printToAll(text, stringColorToRGB(playerColor))
    broadcastToAll(text, stringColorToRGB(PlayerColor))
end

function StartSkillCheck(object, playerColor)
    local CrisisBoardObj = getObjectFromGUID(CrisisBoard)

    if (CrisisBoardObj.getPosition()['y'] > 0) then
        return
    end

    -- Find player to my left
    for y, test in ipairs(PlayerTable) do
        if test.PlayerColor == playerColor then
            if skillcheck_startingplayer <= 0 then
                skillcheck_currentplayer = y + 1
            else
                skillcheck_currentplayer = skillcheck_startingplayer + 1
            end
            if skillcheck_currentplayer > #PlayerTable then
                skillcheck_currentplayer = 1
            end
            break
        end
    end

    local playerHand = Player[PlayerTable[skillcheck_currentplayer].PlayerColor].getPlayerHand()
    local rotation = {playerHand['rot_x'], playerHand['rot_y'] + 180, playerHand['rot_z']}
    local position = HandPositionObject(playerHand, 10, 0, 10, 0)

    CrisisBoardObj.setPositionSmooth({position[1],position[2] + 4.4,position[3]},false,true)
    CrisisBoardObj.setRotation(rotation)
    CrisisBoardObj.createButton(PassButton)

    SCBoardTriggerObj.setPositionSmooth({position[1],position[2] + 4.4 + 2.6 ,position[3]},false,true)
    SCBoardTriggerObj.setRotation(rotation)

    BroadcastCurrentSkillCheckPlayer(PlayerTable[skillcheck_currentplayer].PlayerColor)

    SetLayoutButtonState(object, SCStateEnum.inprogress)
end

function Pass(object, playercolor)
    if PlayerTable[skillcheck_currentplayer].PlayerColor ~= playercolor then
        return
    end

    skillcheck_counter = skillcheck_counter + 1
    skillcheck_currentplayer = skillcheck_currentplayer + 1
    if skillcheck_currentplayer > #PlayerTable then
        skillcheck_currentplayer = 1
    end

    Count = 0
    local ZoneObjects = SCBoardTriggerObj.getObjects()
    for i, object in ipairs(ZoneObjects) do
        if object.name == 'Card' or object.name == 'Deck' then
             object.setRotation({0,180,180})
             object.setPositionSmooth({20,1,-3.3})
             if object.name == 'Deck' then
                 Count = Count + #object.getObjects()
             else
                 Count = Count + 1
             end
        end
    end
    sendMessage(playercolor .. ' added ' .. Count .. ' card(s).',playercolor)

    if skillcheck_counter == #PlayerTable then
         skillcheck_counter = 0
         local CrisisBoardObj = getObjectFromGUID(CrisisBoard)
         CrisisBoardObj.setPositionSmooth({0,-4,0},false,true)
         CrisisBoardObj.removeButton(0)
         SetLayoutButtonState(MainBoardObj,SCStateEnum.layout)
         SCBoardTriggerObj.setPositionSmooth({0,-4+2.6,0},false,true)
    else
        local playerHand = Player[PlayerTable[skillcheck_currentplayer].PlayerColor].getPlayerHand()
        local rotation = {playerHand['rot_x'], playerHand['rot_y'] + 180, playerHand['rot_z']}
        local position = HandPositionObject(playerHand, 10, 0, 10, 0)
        getObjectFromGUID(CrisisBoard).setPositionSmooth({position[1],position[2] + 4.4,position[3]},false,true)
        getObjectFromGUID(CrisisBoard).setRotation(rotation)
        SCBoardTriggerObj.setPositionSmooth({position[1],position[2] + 4.4 + 2.6 ,position[3]},false,true)
        SCBoardTriggerObj.setRotation(rotation)
        BroadcastCurrentSkillCheckPlayer(PlayerTable[skillcheck_currentplayer].PlayerColor)
    end

end


function save(data)
    selectedexpansion = data[1]
    selectedobjective = data[2]
    selectedpegasus = data[3]
    selecteddaybreak = data[4]
    selectedexodus = data[5]
    local selectedplayercolors = data[6]
    selecteddebugmode = data[7]
    BroadCastMessage = data[8].BroadCastMessage
    selectedfirstplayer = data[9]
    if selecteddebugmode == true then
        sendMessage('Entering Debug Mode','Red')
    end
    for _, color in ipairs(selectedplayercolors) do
        local PlayerTableInfo={}
        PlayerTableInfo.PlayerColor = color
        table.insert(PlayerTable,PlayerTableInfo)
    end
    --print_r(PlayerTable)
    -- Use skillcheck counter for player position during character selection
    skillcheck_counter = 1
    skillcheck_currentplayer = 1
    if selectedfirstplayer > 0 then
        skillcheck_currentplayer = selectedfirstplayer
    else
        local obj_parameters = {type='Die_8', position={0.00, 2.00, -17.00}, rotation={0,0,0}, scale={2.5,2.5,2.5}, callback='setTintColor', params={color='Red'}}
        FirstPlayerDie = spawnObject(obj_parameters)
    end

    GenerateCharacterButtons()
    SetupNextCharacterPicker()
end

function spawnDrawCards(object)

    local drawColors = {}

    local drawColors = NCharData[object.getName()][6]

    local Position = -2
    if drawColors[1] >= 5 then
        object.createButton({label = 'Treachery', click_function = 'drawTreachery', rotation = {0, 0, 0},
                            position = {-4, 0.6, Position}, width = 1000, height = 300, font_size = 150})
        Position = Position + 1
    end
    if drawColors[2] >= 5 then
        object.createButton({label = 'Politics', click_function = 'drawPolitics', rotation = {0, 0, 0},
                            position = {-4, 0.6, Position}, width = 1000, height = 300, font_size = 150})
        Position = Position + 1
    end
    if drawColors[3] >= 5 then
        object.createButton({label = 'Leadership', click_function = 'drawLeadership', rotation = {0, 0, 0},
                            position = {-4, 0.6, Position}, width = 1000, height = 300, font_size = 150})
        Position = Position + 1
    end
    if drawColors[4] >= 5 then
        object.createButton({label = 'Tactics', click_function = 'drawTactics', rotation = {0, 0, 0},
                            position = {-4, 0.6, Position}, width = 1000, height = 300, font_size = 150})
        Position = Position + 1
    end
    if drawColors[5] >= 5 then
        object.createButton({label = 'Piloting', click_function = 'drawPiloting', rotation = {0, 0, 0},
                            position = {-4, 0.6, Position}, width = 1000, height = 300, font_size = 150})
        Position = Position + 1
    end
    if drawColors[6] >= 5 then
        object.createButton({label = 'Engineering', click_function = 'drawEngineering', rotation = {0, 0, 0},
                            position = {-4, 0.6, Position}, width = 1000, height = 300, font_size = 150})
        Position = Position + 1
    end
    if object.getDescription() ~= 'Cylon Leader' then
        object.createButton({label = 'Draw Set', click_function = 'drawSet', rotation = {0, 0, 0},
                            position = {-4, 0.6, Position}, width = 1000, height = 300, font_size = 150})
    end

    object.createButton({label = 'Execute', click_function = 'Execute', rotation = {0, 0, 0},
                        position = {3.6, 0.6, -2.8}, width = 1000, height = 300, font_size = 150})

end

function drawTreachery(object, playerColor)
    draw1card(object, playerColor, 'TreacheryTrigger')
end
function drawPolitics(object, playerColor)
    draw1card(object, playerColor, 'PoliticsTrigger')
end
function drawLeadership(object, playerColor)
    draw1card(object, playerColor, 'LeadershipTrigger')
end
function drawTactics(object, playerColor)
    draw1card(object, playerColor, 'TacticsTrigger')
end
function drawPiloting(object, playerColor)
    draw1card(object, playerColor, 'PilotingTrigger')
end
function drawEngineering(object, playerColor)
    draw1card(object, playerColor, 'EngineeringTrigger')
end

function draw1card(object, playerColor, trigger)
    local data = object.getTable('Data')
    if PlayerTable[data.PlayerPosition].PlayerColor == playerColor then
        local Deck = ReturnDeck(trigger)
        if Deck ~= nil then
            Deck.dealToColor(1, playerColor)
        end
    end
end

function ReturnDeck(trigger)
    -- Returns a deck inside a scripting trigger location
    local ZoneObjects = FindObject(trigger).getObjects()
    local Deck = nil
    for i, obj in ipairs(ZoneObjects) do
        if obj.name == 'Deck' then
            Deck = obj
        end
    end
    if trigger == 'LayoutTrigger' then
        return Deck, #ZoneObjects
    end
    if #ZoneObjects > 2 then
        sendMessage('Error - ' .. trigger .. ' might not be a single deck.', 'Black')
    end
    if Deck == nil then
        -------DON"T LIKE THIS REDO IT PLEASE
        local triggers = {'TreacheryTrigger','PoliticsTrigger','LeadershipTrigger','TacticsTrigger','PilotingTrigger','EngineeringTrigger'}
        local discardstriggers = {'TreacheryDiscard','PoliticsDiscard','LeadershipDiscard','TacticsDiscard','PilotingDiscard','EngineeringDiscard'}
        for y=1,6,1 do
            if trigger == triggers[y] then
                Deck = RebuildDeck(discardstriggers[y])
            end
        end
    end
    return Deck
end

function drawSet(object, playerColor)
    -- Draws a set of cards for the character.
    local data = object.getTable('Data')
    local drawColors = NCharData[object.getName()][6]
    if PlayerTable[data.PlayerPosition].PlayerColor == playerColor then
        local triggers = {'TreacheryTrigger','PoliticsTrigger','LeadershipTrigger','TacticsTrigger','PilotingTrigger','EngineeringTrigger'}
        for y=1,6,1 do
            local Deck = ReturnDeck(triggers[y])
            if Deck ~= nil then
                if drawColors[y] < 5 then
                    Deck.dealToColor(drawColors[y], playerColor)
                elseif drawColors[y] > 5 then
                    Deck.dealToColor(drawColors[y]-5, playerColor)
                end
            end
        end
    end
end


function RebuildDeck(Trigger)
    local Deck = ReturnDeck(Trigger)
    if Deck ~= nil then
        local pos = Deck.getPosition()
        local rot = Deck.getRotation()
        Deck.shuffle()
        Deck.setPosition({pos[1] - 2.3, 1.15, pos[3]})
        Deck.setRotation({0, 180, 180})
        return Deck
    else
        ---DON"T LIKE THIS REDO
        if Trigger == 'TreacheryDiscard' then
            if selectedexpansion.Pegasus == true or selectedexpansion.Daybreak == true then
                sendMessage('Error - not enough discards cards for ' .. Trigger,'Black')
            end
        else
            sendMessage('Error - not enough discards cards for ' .. Trigger,'Black')
        end
    end
end

function Take2Destiny(object, playerColor)
    local Deck = ReturnDeck('DestinyTrigger')
    if Deck ~= nil then
        Deck.takeObject({position = {20,2,-3.3},rotation = {0,180,180}})
        Deck.takeObject({position = {20,2,-3.3},rotation = {0,180,180}})
    else
        Destiny(object, playerColor, true)
    end
    EnableAddDestinyButton(object, false)
end

function EnableAddDestinyButton(object, bEnable)
    skillcheck_destinybutton = bEnable
    local button, index = FindButton(object, 'Take2Destiny')
    if skillcheck_destinybutton == false then
        if index ~= 0 then
            object.removeButton(index)
        end
    else
        if index == 0 then
            local AddDestiny = {['click_function'] = 'Take2Destiny', ['label'] = 'Destiny', ['position'] = {9.8, 0.6, 1.65}, ['rotation'] =  {0, 0, 0}, ['width'] = 750, ['height'] = 150, ['font_size'] = 150}
            object.createButton(AddDestiny)
        end
    end
end

function CylonTracker(params)
    local object = params[1]

    object.createButton({label = 'X', click_function = 'CylonJump', rotation = {0, 0, 0}, position = {-2.2 + CylonJumpLocation, 0.6, -7}, width = 500, height = 500, font_size = 350})
    object.createButton({label = '>', click_function = 'CylonIncreaseJump', rotation = {0, 0, 0}, position = {2.7, 0.6, -7}, width = 250, height = 250, font_size = 250})
    object.createButton({label = '<', click_function = 'CylonDecreaseJump', rotation = {0, 0, 0}, position = {-3.1, 0.6, -7}, width = 250, height = 250, font_size = 250})
end

function CylonIncreaseJump(object, playerColor)
    CylonJumpLocation = CylonJumpLocation + 1.15
    if CylonJumpLocation > 4.5 then
        CylonJumpLocation = 0
        sendMessage(playerColor .. ' is having cylons jump in.',playerColor)
    else
        sendMessage(playerColor .. ' increased the Pursuit Tracker',playerColor)
    end
    local button, index = FindButton(object, 'CylonJump')
    object.editButton({index = index, position = {-2.2 + CylonJumpLocation, 0.6, -7}})
end

function CylonDecreaseJump(object, playerColor)
    CylonJumpLocation = CylonJumpLocation - 1.15
    if CylonJumpLocation < 0 then
        CylonJumpLocation = 0
    else
        sendMessage(playerColor .. ' decreased the Pursuit Tracker',playerColor)
    end
    local button, index = FindButton(object, 'CylonJump')
    object.editButton({index = index, position = {-2.2 + CylonJumpLocation, 0.6, -7}})
end

function Jump()
end
function CylonJump()
end



function JumpTracker(params)
    local object = params[1]
    object.createButton({label = 'X', click_function = 'Jump', rotation = {0, 0, 0},
    position = {5.35 + JumpLocation, 0.6, -4.8}, width = 250, height = 250, font_size = 150})
    object.createButton({label = '>', click_function = 'IncreaseJump', rotation = {0, 0, 0},
    position = {7.85, 0.6, -5.27}, width = 150, height = 150, font_size = 150})
    object.createButton({label = '<', click_function = 'DecreaseJump', rotation = {0, 0, 0},
    position = {5.35, 0.6, -5.27}, width = 150, height = 150, font_size = 150})
end

function IncreaseJump(object, playerColor)
    JumpLocation = JumpLocation + 0.57
    if JumpLocation > 2.5 then
        JumpLocation = 0
        sendMessage(playerColor .. ' is jumping the fleet.',playerColor)
    else
        sendMessage(playerColor .. ' increased the Jump Tracker',playerColor)
    end
    local button, index = FindButton(object, 'Jump')
    object.editButton({index = index, position = {5.35 + JumpLocation, 0.6, -4.8}})
end

function DecreaseJump(object, playerColor)
    JumpLocation = JumpLocation - 0.57
    if JumpLocation < 0 then
        JumpLocation = 0
    else
        sendMessage(playerColor .. ' decreased the Jump Tracker',playerColor)
    end
    local button, index = FindButton(object, 'Jump')
    object.editButton({index = index, position = {5.35 + JumpLocation, 0.6, -4.8}})
end

function spawnships()
    local obj_parameters = {}
    obj_parameters.type = 'Custom_Model'
    obj_parameters.position = {-14.7,2,-8.3}
    obj_parameters.rotation = {0,90,0}
    obj_parameters.scale = {0.5,0.5,0.5}

    local custom = {}
    custom.mesh = 'http://cloud-3.steamusercontent.com/ugc/842590510549645779/594B473131270AE8EE4FA9EC8B92F0D9A40060B1/'
    custom.diffuse = 'http://cloud-3.steamusercontent.com/ugc/842590510549645841/B7CEBF3E03AB4C6593083BF974A58BF2D4E0E545/'

    for i=3,1,-1 do
        obj_parameters.position = {-14.7,2,-8.3 + (1 * i)}
        local raider = spawnObject(obj_parameters)
        raider.setName('Raider -- On Roll 3-8 Destroyed')
        raider.setCustomObject(custom)
    end

    takeobj("Basestar 2","Null",{-14.2,2,-1},{0,90,0},ExtrasBag)

    local basestar_damage_type = "Basestar Damage"

    if selectedexpansion.Exodus == true then
        if selectedobjective == 'Exodus' then
            basestar_damage_type = "Exodus Basestar Damage"
        end
    end

    if selectedexodus.CylonFleet == false then
        takeobj("Raiders","Null",{-20.5,1,-14.75},{0,0,0},ExtrasBag, 'Lock')
        takeobj("Heavy Raiders","Null",{-20.5,1,-11.5},{0,0,0},ExtrasBag, 'Lock')
        takeobj("Basestar 1","Null",{-20.5,1,-8},{0,0,0},ExtrasBag)
        takeobj(basestar_damage_type,"Null",{-23,1,-11.5},{180,270,0},ExtrasBag,'Shuffle')
        if selectedexpansion.Pegasus == true then
            takeobj("Scar","Null",{-20.5,1.06,-4},{0,180,0},ExtrasBag)
        end
        totalvipers = 8
    else
        local obj_parameters = {}
        obj_parameters.type = 'Custom_Model'
        obj_parameters.position = {-23.7,1,-18.6}
        obj_parameters.rotation = {0,90,0}
        obj_parameters.scale = {0.5,0.5,0.5}
        takeobj("Raiders","Null",obj_parameters.position,obj_parameters.rotation,ExtrasBag,'Lock')

        local custom = {}
        custom.mesh = 'http://cloud-3.steamusercontent.com/ugc/842590510549645779/594B473131270AE8EE4FA9EC8B92F0D9A40060B1/'
        custom.diffuse = 'http://cloud-3.steamusercontent.com/ugc/842590510549645841/B7CEBF3E03AB4C6593083BF974A58BF2D4E0E545/'

        for i=4,1,-1 do
            obj_parameters.position = {-23.7,1 + (0.5 * i),-18.6}
            local raider = spawnObject(obj_parameters)
            raider.setName('Raider -- On Roll 3-8 Destroyed')
            raider.setCustomObject(custom)
        end
        takeobj("Heavy Raiders","Null",{-28.8,1,-18.5},{0,90,0},ExtrasBag,'Lock')
        takeobj("Basestar 1","Null",{-33,1,-18.5},{0,90,0},ExtrasBag)
        takeobj(basestar_damage_type,"Null",{-28.8,1,-20.5},{180,270,0},ExtrasBag,'Shuffle')

        local obj_parameters = {}
        obj_parameters.type = 'Custom_Model'
        obj_parameters.position = {-12.1,2,13}
        obj_parameters.rotation = {0,180,0}
        obj_parameters.scale = {0.5,0.5,0.5}

        local custom = {}
        custom.mesh = 'http://cloud-3.steamusercontent.com/ugc/842590598990490238/B87068926E6AA462FAAE35205D40D44E67EEF176/'
        custom.diffuse = 'http://cloud-3.steamusercontent.com/ugc/842590598990490314/2D78B1756FBB294975ADBDA66DD4497F2B69E50E/'

        x = 0
        y = 0
        for i=4,1,-1 do
            obj_parameters.position = {-12.1 + (1 * x),2,13 + y}
            local hviper = spawnObject(obj_parameters)
            hviper.setCustomObject(custom)
            hviper.setName('Viper VII -- On Roll 6-7 Damaged, 8 Destroyed')
            x = x + 1
            if x == 2 then
                x = 0
                y = 1
            end
        end
        totalvipers = 6
    end

    local obj_parameters = {}
    obj_parameters.type = 'Custom_Model'
    obj_parameters.position = {-8.7,2,13}
    obj_parameters.rotation = {0,180,0}
    obj_parameters.scale = {0.5,0.5,0.5}

    local custom = {}
    custom.mesh = 'http://cloud-3.steamusercontent.com/ugc/842590598990501795/A2C0FEF790ED478222068EF09C163691779FF0C2/'
    custom.diffuse = 'http://cloud-3.steamusercontent.com/ugc/842590598990501877/2FCA6CDAB29D22D4D733435249F6B3E5430DD278/'

    local LaunchViper = false

    for _, test in ipairs(PlayerTable) do
        local location_name = NCharData[test.Object.getName()][5]
        if location_name == 'Launch' then
            LaunchViper = true
            break
        end
    end

    x = 0
    y = 0
    for i=totalvipers,1,-1 do
        obj_parameters.position = {-8.7 + (1 * x),2,13 + y}
        if i == (totalvipers / 2) then
            obj_parameters.position = {-5,2,-13}
        elseif i == (totalvipers -1) and LaunchViper == true then
            obj_parameters.position = {0,2,-13}
        elseif i == totalvipers then
            obj_parameters.position = {5,2,-13}
        end

        local viper = spawnObject(obj_parameters)
        viper.setCustomObject(custom)
        viper.setName('Viper -- On Roll 5-7 Damaged, 8 Destroyed')
        x = x + 1
        if x == (totalvipers / 2) then
            x = 0
            y = 1
        end
    end

    -- Spawn Destruction bag
    local obj_parameters = {}
    obj_parameters.type = 'Custom_Model'
    obj_parameters.position = {-9.69, 0.95, 19.86}
    obj_parameters.scale = {2.27, 2.27, 2.27}
    obj_parameters.rotation = {0, 0, 0}
    obj_parameters.callback = 'lock'

    local DestructionViper = spawnObject(obj_parameters)
    custom.type = 6
    DestructionViper.setCustomObject(custom)
    DestructionViper.setName('Destroyed Ships')
    DestructionViper.lock()

    local obj_parameters = {}
    obj_parameters.type = 'Custom_Model'
    obj_parameters.position = {-4.5,2,13}
    obj_parameters.rotation = {0,180,0}
    obj_parameters.scale = {0.40,0.40,0.40}

    local custom = {}
    custom.mesh = 'http://cloud-3.steamusercontent.com/ugc/842590598990508584/025557F928FCB386C047873300E34ACECEE9701B/'
    custom.diffuse = 'http://cloud-3.steamusercontent.com/ugc/842590598990508680/4109837C6F66CE1993CE20187DEC0FB8FB5D7D4E/'

    x = 0
    y = 0
    for i=4,1,-1 do
        obj_parameters.position = {-4.5 + (0.75 * x),2,13 + y}
        local raptor = spawnObject(obj_parameters)
        raptor.setCustomObject(custom)
        raptor.setName('Raptor')
        x = x + 1
        if x == 2 then
            x = 0
            y = 1
        end
    end
    if selectedexpansion.Daybreak == true then
        local obj_parameters = {}
        obj_parameters.type = 'Custom_Model'
        obj_parameters.position = {-2.4,2,13}
        obj_parameters.rotation = {0,180,0}
        obj_parameters.scale = {0.75,0.75,0.75}

        local custom = {}
     	custom.mesh = 'http://cloud-3.steamusercontent.com/ugc/842590598990508584/025557F928FCB386C047873300E34ACECEE9701B/'
    	custom.diffuse = 'http://cloud-3.steamusercontent.com/ugc/842590598990508680/4109837C6F66CE1993CE20187DEC0FB8FB5D7D4E/'

        x = 0
        y = 0
        for i=4,1,-1 do
            local Araptor = spawnObject(obj_parameters)
            Araptor.setCustomObject(custom)
            Araptor.setName('Assult Raptor -- On Roll 7-8 Destroyed')
            obj_parameters.position = {-5.2 + (1 * x),2,18}
            x = x + 1
        end
    end



    local obj_parameters = {}
    obj_parameters.type = 'Custom_Model'
    obj_parameters.position = {17.7,2,17}
    obj_parameters.rotation = {0,180,0}
    obj_parameters.scale = {0.75,0.75,0.75}

    local custom = {}
    custom.mesh = 'http://cloud-3.steamusercontent.com/ugc/842590598990516898/9485F6B6675F1E5C80927912E116FF9C18CBD73D/'
    custom.diffuse = 'http://cloud-3.steamusercontent.com/ugc/842590598990516974/5BED95E54596A5723FBE99E262896FB208F04924/'
    custom.material = 3

    for i=4,1,-1 do
        obj_parameters.position = {17.7,2,17 + (i * 1.2)}
        local Centurion = spawnObject(obj_parameters)
        Centurion.setCustomObject(custom)
        Centurion.setName('Centurion')
    end

end

function FindDeck(point)
    local HitResults = Physics.cast({origin={point[1],point[2]+3,point[3]},direction={0,-1,0},type=1,max_distance=3,debug=true})

    for _, result in ipairs(HitResults) do
        if result.hit_object.name == 'Deck' then
            return result.hit_object
        end
    end
end

function ShuffleAll()
    for i, obj in ipairs(getObjectFromGUID('049ae3').getObjects()) do
        if obj.name == 'Deck' then
            obj.shuffle()
        end
    end
    getObjectFromGUID(TQMOBag).destruct()
    getObjectFromGUID(LocationsBag).destruct()
    getObjectFromGUID(LoyaltyCylonBag).destruct()
    getObjectFromGUID(LoyaltyHumanBag).destruct()
    getObjectFromGUID(LoyaltySpecialBag).destruct()
    getObjectFromGUID(TPLTPEBag).destruct()
    getObjectFromGUID(DestinationsBag).destruct()
    getObjectFromGUID(CrisisCardsBag).destruct()
    getObjectFromGUID(SupercrisisCardsBag).destruct()
    getObjectFromGUID(ExtrasBag).destruct()

    local deck = FindDeck({0,0,19.12})
    if deck ~= nil then
        deck.SetName('Loyalty Deck')
    end

    if selectedexpansion.Exodus == true then
        deck = FindDeck({0,0,23.5})
        deck.SetName('Extra Human Loyalty Cards')
    end
end

function InProgress(object, playerColor)
end

function SetLayoutButtonState(object, state)
    local button, index = FindButton(object, 'StartSkillCheck')
    if (index <= 0) then
        button, index = FindButton(object, 'InProgress')
        if (index <= 0) then
            button, index = FindButton(object, 'Layout')
            if (index <= 0) then
                button, index = FindButton(object, 'returnSkillCards')
            end
        end
    end

    if (state == SCStateEnum.startcheck) then
        object.editButton({index = index, label = 'Start Check', click_function = 'StartSkillCheck', color = {1,1,1}})
    elseif (state == SCStateEnum.inprogress) then
        object.editButton({index = index, label = 'In Progress', click_function = 'InProgress', color = {1,1,0}})
    elseif (state == SCStateEnum.layout) then
        object.editButton({index = index, label = 'Layout', click_function = 'Layout', color = {0,1,0}})
    elseif (state == SCStateEnum.returncards) then
        object.editButton({index = index, label = 'Return Cards', click_function = 'returnSkillCards', color = {1,1,1}})
    end
    skillcheck_state = state
    --print('Layout State ' .. skillcheck_state)
end

function Timer2(params)
    if timer2 == true then
        SetLayoutButtonState(params.object, SCStateEnum.returncards)
        timer2 = nil
    end
end

function grid(number)
--get number return row/column
    if number < 11 then
        return 1, number
    end
    if number < 21 then
        return 2, (number - 10)
    end
    if number < 31 then
        return 3, (number - 20)
    end
    if number < 41 then
        return 4, (number - 30)
    end
    if number < 51 then
        return 5, (number - 40)
    end
end

function Layout(object, playerColor)

    Timer.destroy('t2')
    timer2 = nil

    local Deck, count = ReturnDeck('LayoutTrigger')
    if Deck ~= nil then
        if count > 3 then
            sendMessage('Error - Skill Check must be one deck, select and group them first.','Black')
            return
        end
        Deck.shuffle()
        local NewDeck = {}
        local Cards = {'TR','P','L','T','PI','E'}
        local Counter = 1
        for i=1,6,1 do
            for y, obj in ipairs(Deck.getObjects()) do
                if obj.description == Cards[i] then
                    NewDeck[Counter] = obj.guid
                    Counter = Counter + 1
                end
            end
        end
        if #NewDeck > 40 then
            sendMessage('Error - AutoLayout exceeds recommened amount. This might cause issues.', 'Black')
        end
        for i=1,#NewDeck,1 do
            a, b = grid(i)
            if i ~= #NewDeck then
                Deck.takeObject({position = {21 + (b * 2.2),1.4 + (i * 0.1),8.3 - (a * 3.1)}, rotation = {0,180,0}, guid = NewDeck[i]})
            else
                Deck.takeObject({position = {21 + (b * 2.2),1.4 + (i * 0.1),8.3 - (a * 3.1)}, rotation = {0,180,0}, index = 1})
            end
        end
    end
    SetLayoutButtonState(object, SCStateEnum.returncards)
end

function returnSkillCards(object, playerColor)
    if timer2 == true then
        SetLayoutButtonState(params.object, SCStateEnum.startcheck)
        EnableAddDestinyButton(object,true)
        timer2 = false
    elseif timer2 == nil then
        local button, index = FindButton(object, 'returnSkillCards')
        object.editButton({index = index, label = 'OK?', click_function = 'returnSkillCards'})
        params = {}
        params.object = object
        params.color = playerColor
        Timer.create({identifier = 't2', function_name = 'Timer2', parameters = params, delay = 2})
        timer2 = true
        return
    end

    local Cards = {'TR','P','L','T','PI','E'}
    local CardsPos = {-11, -6.2, -1.3, 3.35, 8.1, 12.9}
    for i, obj in ipairs(FindObject('CrisisTrigger').getObjects()) do
        if obj.name == 'Card' then
            for y=1,6,1 do
                if obj.getDescription() == Cards[y] then
                    obj.setPositionSmooth({CardsPos[y], 1.3, -20})
                end
            end
        end
        if obj.name == 'Deck' then
            local DeckObjects = obj.getObjects()
            for y=1,6,1 do
                for t, objs in ipairs(DeckObjects) do
                    if objs.description == Cards[y] then
                        if t ~= #DeckObjects then
                            obj.takeObject({position = {CardsPos[y], 1.3, -20}, rotation = {0,180,0}, guid = objs.guid})
                        else
                            obj.takeObject({position = {CardsPos[y], 1.3, -20}, rotation = {0,180,0}, index = 1})
                        end
                    end
                end
            end
        end
    end
end

function Destiny(object, playerColor, bAddDestiny)
    --Builds the Destiny Deck
    local Deck = ReturnDeck('DestinyTrigger')
    if Deck == nil then
        --sendMessage('Building Destiny...','Yellow')
        local triggers = {'TreacheryTrigger','PoliticsTrigger','LeadershipTrigger','TacticsTrigger','PilotingTrigger','EngineeringTrigger'}
        for y=1,6,1 do
            --sendMessage('Checking ' .. triggers[y] .. ' for cards','Yellow')
            Deck = ReturnDeck(triggers[y])
            if Deck ~= nil then
                   Deck.takeObject({position = {-15.2,1.2 + (0.1 * y),      13.4}, rotation = {0,180,180}})
                   Deck.takeObject({position = {-15.2,1.2 + (0.1 * (y + 6)),13.4}, rotation = {0,180,180}})
            elseif y > 1 then
                sendMessage('Warning: ' .. triggers[y] .. ' is empty!','Red')
            end
        end
        Timer.create({identifier = 't5', function_name = 'Timer5', parameters = {object,bAddDestiny}, delay = 3})
    end
end

function Timer5(params)
    local Deck = ReturnDeck('DestinyTrigger')
    Deck.shuffle()
    if params[2] == true then
        Take2Destiny(params[1])
    end
end

function FindObject(Name)
    for i, object in ipairs(getAllObjects()) do
        if object.getName() == Name then
            return object
        end
    end
end

function updateDisplay(object,display,count,starting_count,color,increased)
    local button_parameters = {}
    local button, index = FindButton(object, display["click_function"])
    button_parameters.label =  tostring(count)
    button_parameters.index = index
    if (count <= (starting_count/2)) then
        button_parameters.font_color = {1,0,0}
    else
        button_parameters.font_color = {0,0,0}
    end
    object.editButton(button_parameters)
    local change_string = ' decreased '
    if increased == true then
        change_string = ' increased '
    end
    sendMessage(color .. change_string .. display["click_function"] .. ' to ' .. tostring(count), color)
end

function setupCounters(params)
    local object = params[1]

    MainBoardObj = object

    FuelDisplay = {['click_function'] = 'Fuel', ['label'] = tostring(fuelcount), ['position'] = {1.05, 0.60, -7}, ['rotation'] =  {0, 0, 0}, ['width'] = 350, ['height'] = 350, ['font_size'] = 250}
    if (fuelcount <= (STARTING_FUEL/2)) then
        FuelDisplay.font_color = {1,0,0}
    end
    object.createButton(FuelDisplay)
    FoodDisplay = {['click_function'] = 'Food', ['label'] = tostring(foodcount), ['position'] = {3.1, 0.60, -7}, ['rotation'] =  {0, 0, 0}, ['width'] = 350, ['height'] = 350, ['font_size'] = 250}
    if (foodcount <= (STARTING_FOOD/2)) then
        FoodDisplay.font_color = {1,0,0}
    end
    object.createButton(FoodDisplay)
    MoraleDisplay = {['click_function'] = 'Morale', ['label'] = tostring(moralecount), ['position'] = {5.2, 0.60, -7}, ['rotation'] =  {0, 0, 0}, ['width'] = 350, ['height'] = 350, ['font_size'] = 250}
    if (moralecount <= (STARTING_MORALE/2)) then
        MoraleDisplay.font_color = {1,0,0}
    end
    object.createButton(MoraleDisplay)
    PopulationDisplay = {['click_function'] = 'Population', ['label'] = tostring(populationcount), ['position'] = {7.3, 0.60, -7}, ['rotation'] =  {0, 0, 0}, ['width'] = 350, ['height'] = 350, ['font_size'] = 250}
    if (populationcount <= (STARTING_POPULATION/2)) then
        PopulationDisplay.font_color = {1,0,0}
    end
    object.createButton(PopulationDisplay)

    local IncreaseFuel = {['click_function'] = 'IncreaseFuel', ['label'] = '+', ['position'] = {1.6, 0.60, -7}, ['rotation'] =  {0, 0, 0}, ['width'] = 150, ['height'] = 150, ['font_size'] = 150}
    object.createButton(IncreaseFuel)
    local DecreaseFuel = {['click_function'] = 'DecreaseFuel', ['label'] = '-', ['position'] = {0.5, 0.60, -7}, ['rotation'] =  {0, 0, 0}, ['width'] = 150, ['height'] = 150, ['font_size'] = 150}
    object.createButton(DecreaseFuel)
    local IncreaseFood = {['click_function'] = 'IncreaseFood', ['label'] = '+', ['position'] = {3.65, 0.60, -7}, ['rotation'] =  {0, 0, 0}, ['width'] = 150, ['height'] = 150, ['font_size'] = 150}
    object.createButton(IncreaseFood)
    local DecreaseFood = {['click_function'] = 'DecreaseFood', ['label'] = '-', ['position'] = {2.55, 0.60, -7}, ['rotation'] =  {0, 0, 0}, ['width'] = 150, ['height'] = 150, ['font_size'] = 150}
    object.createButton(DecreaseFood)
    local IncreaseMorale = {['click_function'] = 'IncreaseMorale', ['label'] = '+', ['position'] = {5.7, 0.60, -7}, ['rotation'] =  {0, 0, 0}, ['width'] = 150, ['height'] = 150, ['font_size'] = 150}
    object.createButton(IncreaseMorale)
    local DecreaseMorale = {['click_function'] = 'DecreaseMorale', ['label'] = '-', ['position'] = {4.65, 0.60, -7}, ['rotation'] =  {0, 0, 0}, ['width'] = 150, ['height'] = 150, ['font_size'] = 150}
    object.createButton(DecreaseMorale)
    local IncreasePopulation = {['click_function'] = 'IncreasePopulation', ['label'] = '+', ['position'] = {7.85, 0.60, -7}, ['rotation'] =  {0, 0, 0}, ['width'] = 150, ['height'] = 150, ['font_size'] = 150}
    object.createButton(IncreasePopulation)
    local DecreasePopulation = {['click_function'] = 'DecreasePopulation', ['label'] = '-', ['position'] = {6.75, 0.60, -7}, ['rotation'] =  {0, 0, 0}, ['width'] = 150, ['height'] = 150, ['font_size'] = 150}
    object.createButton(DecreasePopulation)

    local LayoutButton = {['click_function'] = 'StartSkillCheck', ['label'] = 'Layout', ['position'] = {9.8, 0.6, 3}, ['rotation'] =  {0, 0, 0}, ['width'] = 950, ['height'] = 190, ['font_size'] = 150}
    object.createButton(LayoutButton)
    SetLayoutButtonState(object,skillcheck_state)

    EnableAddDestinyButton(object,skillcheck_destinybutton)
end
function Fuel()
end
function Food()
end
function Morale()
end
function Population()
end

function IncreaseFood(object, playerColor)
    foodcount = foodcount + 1
    if foodcount > 15 then
        foodcount = 15
    end
    updateDisplay(object,FoodDisplay,foodcount,STARTING_FOOD,playerColor,true)
end

function DecreaseFood(object, playerColor)
    foodcount = foodcount - 1
    if foodcount < 0 then
        foodcount = 0
    end
    updateDisplay(object,FoodDisplay,foodcount,STARTING_FOOD,playerColor,false)
end

function IncreaseFuel(object, playerColor)
    fuelcount = fuelcount + 1
    if fuelcount > 15 then
        fuelcount = 15
    end
    updateDisplay(object,FuelDisplay,fuelcount,STARTING_FUEL,playerColor,true)
end

function DecreaseFuel(object, playerColor)
    fuelcount = fuelcount - 1
    if fuelcount < 0 then
        fuelcount = 0
    end
    updateDisplay(object,FuelDisplay,fuelcount,STARTING_FUEL,playerColor,false)
end

function IncreasePopulation(object, playerColor)
    populationcount = populationcount + 1
    if populationcount > 15 then
        populationcount = 15
    end
    updateDisplay(object,PopulationDisplay,populationcount,STARTING_POPULATION,playerColor,true)
end

function DecreasePopulation(object, playerColor)
    populationcount = populationcount - 1
    if populationcount < 0 then
        populationcount = 0
    end
    updateDisplay(object,PopulationDisplay,populationcount,STARTING_POPULATION,playerColor,false)
end

function IncreaseMorale(object, playerColor)
    moralecount = moralecount + 1
    if moralecount > 15 then
        moralecount = 15
    end
    updateDisplay(object,MoraleDisplay,moralecount,STARTING_MORALE,playerColor,true)
end

function DecreaseMorale(object, playerColor)
    moralecount = moralecount - 1
    if moralecount < 0 then
        moralecount = 0
    end
    updateDisplay(object,MoraleDisplay,moralecount,STARTING_MORALE,playerColor,false)
end

function PrintSuccession(object, playerColor)
    local num_titles = 2
    if selectedexodus.CylonFleet == true then
        num_titles = 3
    end
    for i=1,num_titles,1 do
        local SuccessionList={}
        for j=1,#PlayerTable,1 do
            local SuccessionEntry = {}
            local obj = PlayerTable[j].Object
            if obj ~= nil then
                SuccessionEntry.Name = obj.getName()
                SuccessionEntry.Rank = NCharData[obj.getName()][i+1]
                table.insert(SuccessionList,SuccessionEntry)
            end
        end
        table.sort(SuccessionList, function(a,b) return a.Rank < b.Rank end)
        --print_r(SuccessionList)
        if i == 1 then
            printToAll('----Admiral----',{1,0,0})
        end
        if i == 2 then
            printToAll('----President----',{1,0,0})
        end
        if i == 3 then
            printToAll('----CAG----',{1,0,0})
        end
        for y, test in ipairs(SuccessionList) do
            printToAll(y .. ' : ' .. test.Name,{1,0,0})
        end
    end
end

function CloneMiracleTokens(object, params)
    local y_pos = 1.00
    for i=1,9 do
        y_pos = y_pos + 0.1
        object.clone({position = {20.95, y_pos, 18.77}})
    end
end

function SetupBoard()

    local obj_parameters = {}
    obj_parameters.type = 'Custom_Board'
    obj_parameters.rotation = {0,180,0}
    obj_parameters.position = {0,0.5,0}
    obj_parameters.scale = {1.2,1.2,1.2}
    local obj = spawnObject(obj_parameters)
    obj.setLuaScript([[
        function onLoad()
            self.createButton({label = 'BUILD', click_function = 'Destiny', rotation = {0, 0, 0},
                            position = {-7.4, 0.6, -8.3}, width = 550, height = 250, font_size = 150})

            self.createButton({label = 'S', click_function = 'PrintSuccession', rotation = {0, 0, 0},
                            position = {-8.5, 0.6, -8.3}, width = 300, height = 250, font_size = 150})

            Global.call('JumpTracker',{self})
            Global.call('setupCounters',{self})
        end
        ]])
    local custom = {}


    takeobj("Civilian Ships","Null",{12.7,1,19},{180,270,0},ExtrasBag,'Civs')
    takeobj("Galactica Damage","Null",{12.7,1,21.5},{180,270,0},ExtrasBag,'Shuffle')

    if selectedexpansion.Daybreak == true then
        custom.image = 'http://cloud-3.steamusercontent.com/ugc/842590957237165361/2FAABE4773B324A08E20B87A5107331645D67C34/'
        takeobj("Caprica (P)","Null",{1.7,0.5,8},{0,180,0},LocationsBag,'Lock')
        takeobj("Cylon Fleet","Null",{4.1,0.5,8},{0,180,0},LocationsBag,'Lock')
        takeobj("Human Fleet","Null",{6.5,0.5,8},{0,180,0},LocationsBag,'Lock')
        takeobj("Resurrection Ship (D)","Null",{8.87,1.69,8.03},{0,180,0},LocationsBag,'ClearNameAndLock')
    elseif selectedexpansion.Pegasus == true then
        custom.image = 'http://cloud-3.steamusercontent.com/ugc/842590957237148632/8958C6293EBA065D1A9E543F87D5871EE49F1A0A/'
        takeobj("Caprica (P)"," Null",{1.7,0.5,8},{0,180,0},LocationsBag,'Lock')
        takeobj("Cylon Fleet","Null",{4.1,0.5,8},{0,180,0},LocationsBag,'Lock')
        takeobj("Human Fleet (P)","Null",{6.5,0.5,8},{0,180,0},LocationsBag,'Lock')
        takeobj("Resurrection Ship","Null",{8.9,0.5,8},{0,180,0},LocationsBag,'Lock')
    else
        custom.image = 'http://cloud-3.steamusercontent.com/ugc/842590841275951646/4FC4FAA422B7D2A1BAF59D9FD49129FCF532BC9D/'
        takeobj("Caprica","Null",{1.7,0.5,8},{0,180,0},LocationsBag,'Lock')
        takeobj("Cylon Fleet","Null",{4.1,0.5,8},{0,180,0},LocationsBag,'Lock')
        takeobj("HumanFleet","Null",{6.5,0.5,8},{0,180,0},LocationsBag,'Lock')
        takeobj("ResurrectionShip","Null",{8.9,0.5,8},{0,180,0},LocationsBag,'Lock')
    end

    obj.setCustomObject(custom)

    -- Colonial One Locations
    if selectedexpansion.Daybreak == true then
        takeobj("Quorum Chamber","Null",{-14,0.5,8.4},{0,180,0},LocationsBag,'Lock')
        takeobj("Press Room","Null",{-10.5,0.5,8.4},{0,180,0},LocationsBag,'Lock')
        takeobj("Presidents Office","Null",{-7,0.5,8.4},{0,180,0},LocationsBag,'Lock')
        takeobj("Admin","Null",{-3.5,0.5,8.4},{0,180,0},LocationsBag,'Lock')
    else
        takeobj("PressRoom","Null",{-12,0.5,8.4},{0,180,0},LocationsBag,'Lock')
        takeobj("PresidentsOffice","Null",{-8.6,0.5,8.4},{0,180,0},LocationsBag,'Lock')
        takeobj("Administration","Null",{-5.3,0.5,8.4},{0,180,0},LocationsBag,'Lock')
    end

    takeobj("FTLControl","Null",{-9.3,0.5,-5.9},{0,180,0},LocationsBag,'Lock')
    takeobj("WeaponsControl","Null",{-5.6,0.5,-3.8},{0,180,0},LocationsBag,'Lock')
    takeobj("Command","Null",{-5.6,0.5,-8.1},{0,180,0},LocationsBag,'Lock')
    takeobj("Communications","Null",{-1.9,0.5,-3.8},{0,180,0},LocationsBag,'Lock')
    takeobj("AdmiralsQuarters","Null",{-1.9,0.5,-8.1},{0,180,0},LocationsBag,'Lock')
    takeobj("ResearchLab","Null",{1.8,0.5,-3.8},{0,180,0},LocationsBag,'Lock')
    takeobj("HangarDeck","Null",{1.8,0.5,-8.1},{0,180,0},LocationsBag,'Lock')
    takeobj("Armory","Null",{5.5,0.5,-5.9},{0,180,0},LocationsBag,'Lock')
    takeobj("Sickbay","Null",{9.2,0.5,-3.8},{0,180,0},LocationsBag,'Lock')
    takeobj("Brig","Null",{9.2,0.5,-8.1},{0,180,0},LocationsBag,'Lock')


    if selectedexpansion.Pegasus == true then
        obj_parameters = {}
        obj_parameters.type = 'Custom_Board'
        obj_parameters.rotation = {0,180,0}
        obj_parameters.position = {30,1,-11.5}
        obj_parameters.scale = {0.4,0.4,0.4}
        obj = spawnObject(obj_parameters)

        custom = {}
        custom.image = 'http://cloud-3.steamusercontent.com/ugc/842590957237169621/15F762A4D78B1886FE91FF508EFBB476658509BD/'
        obj.setCustomObject(custom)
        takeobj("PegasusCIC","Null",{22.7,0.5,-13.35},{0,180,0},LocationsBag,'Lock')
        takeobj("Airlock","Null",{27.5,0.5,-13.9},{0,180,0},LocationsBag,'Lock')
        takeobj("MainBatteries","Null",{32.3,0.5,-13.9},{0,180,0},LocationsBag,'Lock')
        takeobj("EngineRoom","Null",{37.2,0.5,-13.35},{0,180,0},LocationsBag,'Lock')

        takeobj("Pegasus Damage","Null",{30,1.5,-9},{180,270,0},ExtrasBag,'Shuffle')

        if selectedobjective == 'Pegasus' then
            obj_parameters = {}
            obj_parameters.type = 'Custom_Board'
            obj_parameters.rotation = {0,180,0}
            obj_parameters.position = {30,1, 11.5}
            obj_parameters.scale = {0.4,0.4,0.4}
            obj = spawnObject(obj_parameters)

            custom = {}
            custom.image = 'http://cloud-3.steamusercontent.com/ugc/842590957237172757/5AB18DB4A406A33A9815A203B3D0875F9B7671D2/'
            obj.setCustomObject(custom)
            takeobj("MedicalCenter","Null",{23,0.5,14.1},{0,180,0},LocationsBag,'Lock')
            takeobj("ResistanceHQ","Null",{26.7,0.5,14.1},{0,180,0},LocationsBag,'Lock')

            takeobj("Detention","Null",{23,0.5,9.6},{0,180,0},LocationsBag,'Lock')
            takeobj("OccupationAuthority","Null",{26.8,0.5,9.3},{0,180,0},LocationsBag,'Lock')
            takeobj("BreedersCanyon","Null",{30.2,0.5,9.3},{0,180,0},LocationsBag,'Lock')
            takeobj("Shipyard","Null",{33.65,0.5,9.3},{0,180,0},LocationsBag,'Lock')
            takeobj("NewCapCrisis","Null",{21.5,2,19},{0,180,180},ExtrasBag,'Shuffle')
            takeobj("Occupation Forces","Null",{27.00, 1.03, 18.25},{0,180,0},ExtrasBag)
        end
    end

    if selectedexpansion.Daybreak == true then

        takeobj('MutinyCards','Null',{5.25,2,19},{180 , 0,  0},TQMOBag)

        takeobj("Miracle Token","Null",{20.95, 1.00, 18.77},{0,0,0},ExtrasBag,'CloneMiracleTokens')

        if selectedobjective == 'Daybreak' then

            obj_parameters = {}
            obj_parameters.type = 'Custom_Board'
            obj_parameters.rotation = {0,180,0}
            obj_parameters.position = {30,1,11.5}
            obj_parameters.scale = {0.4,0.4,0.4}
            obj = spawnObject(obj_parameters)

            custom = {}
            custom.image = 'http://cloud-3.steamusercontent.com/ugc/842590957237181507/7B76901E16C78C3F9759CFDAA4C454CB05E68B87/'
            obj.setCustomObject(custom)
            takeobj("Bridge","Null",{22.9,0.5,9.8},{0,180,0},LocationsBag,'Lock')
            takeobj("TacticalPlot","Null",{27.5,0.5,9.8},{0,180,0},LocationsBag,'Lock')
            takeobj("CaptainsCabin","Null",{31.9,0.5,9.8},{0,180,0},LocationsBag,'Lock')

            obj_parameters = {}
            obj_parameters.type = 'Custom_Board'
            obj_parameters.rotation = {0,180,0}
            obj_parameters.position = {-30,1,11.5}
            obj_parameters.scale = {0.4,0.4,0.4}
            obj = spawnObject(obj_parameters)

            custom = {}
            custom.image = 'http://cloud-3.steamusercontent.com/ugc/842590957237185074/872F312BD10E8C1010975B059F6D3E3A9F31BE6A/'
            obj.setCustomObject(custom)
            takeobj("RaiderBay","Null",{-24.4,0.5,10},{0,180,0},LocationsBag,'Lock')
            takeobj("Datastream","Null",{-30,0.5,9.5},{0,180,0},LocationsBag,'Lock')
            takeobj("HybridTank","Null",{-35.6,0.5,10},{0,180,0},LocationsBag,'Lock')

            takeobj("Basestar Allegiance Marker","Null",{-30,1.4,13.5},{0,180,0},ExtrasBag)
            takeobj("MissionCards","Null",{30,1.5,13},{180,0,0},ExtrasBag,'Shuffle')


        end
    end

    if selectedexpansion.Exodus == true then
        if selectedobjective == 'Exodus' then
            takeobj("Crossroads","Null",{-20,2,15},{180,0,0},ExtrasBag,'Shuffle')
            takeobj("Allies","Null",{-25,2,15},{180,270,0},ExtrasBag,'Shuffle')
            takeobj("Ally Tokens","Null",{-28,2,15},{0,180,180},ExtrasBag)
            takeobj("Trauma Tokens","Null",{-25,1.19,19},{0,180,180},ExtrasBag,'Shuffle')
        end

        if selectedexodus.CylonFleet == true then
            obj_parameters = {}
            obj_parameters.type = 'Custom_Board'
            obj_parameters.rotation = {0,180,0}
            obj_parameters.position = {-30,1,-6.5}
            obj_parameters.scale = {0.75,0.75,0.75}
            obj = spawnObject(obj_parameters)
            obj.setLuaScript([[
                function onLoad()
                    Global.call('CylonTracker',{self})
                end
                ]])

            custom = {}
            custom.image = 'http://cloud-3.steamusercontent.com/ugc/842590957237188196/60F9E21088B76AC88BEE5372932DBD1E158875D7/'
            obj.setCustomObject(custom)


            takeobj("Basestar Bridge","Null",{-30,0.5,-6.3},{0,0,0},LocationsBag,'Lock')
            takeobj("Top Left","Null",{-31.75,0.5,-9.2},{0,90,0},LocationsBag,'Lock')
            takeobj("Top Right","Null",{-28.4,0.5,-9.2},{0,90,0},LocationsBag,'Lock')
            takeobj("Bottom Left","Null",{-31.75,0.5,-10.9},{0,90,0},LocationsBag,'Lock')
            takeobj("Bottom Right","Null",{-28.4,0.5,-10.9},{0,90,0},LocationsBag,'Lock')
        end
    end
end

function BuildSupercrisisCards()
    local position = {}
    position['x'] = 16
    position['y'] = 1
    position['z'] = 19
    local rotation = {180 , 0,  0}

    takeobj('SupercrisisCards (B)','Null',position,rotation,SupercrisisCardsBag)
    if selectedexodus.CylonFleet ~= true then
        position['y'] = 2
        takeobj('SupercrisisCards (B) (CA)','Null',position,rotation,SupercrisisCardsBag)
    end
    if selectedexpansion.Pegasus == true then
        position['y'] = 3
        takeobj('SupercrisisCards (P)','Null',position,rotation,SupercrisisCardsBag)
        if selectedexodus.CylonFleet ~= true then
            position['y'] = 4
            takeobj('SupercrisisCards (P) (CA)','Null',position,rotation,SupercrisisCardsBag)
        end
    end
    if selectedexpansion.Exodus == true then
        position['y'] = 5
        takeobj('SupercrisisCards (E)','Null',position,rotation,SupercrisisCardsBag)
        if selectedexodus.CylonFleet == true then
            position['y'] = 6
            takeobj('SupercrisisCards (CAG)','Null',position,rotation,SupercrisisCardsBag)
        end
    end
end

function BuildCrisisCards()
    local position = {}
    position['x'] = 20
    position['y'] = 1
    position['z'] = 3.75
    local rotation = {180 , 0,  0}

    takeobj('CrisisCards (B)','Null',position,rotation,CrisisCardsBag)
    if selectedexpansion.Pegasus == true then
    --    position['y'] = 2
        takeobj('CrisisCards (P)','Null',position,rotation,CrisisCardsBag)
        if selectedexodus.CylonFleet ~= true then
            takeobj('CrisisCards (PCAG)','Null',position,rotation,CrisisCardsBag)
        end
    end


    if selectedexpansion.Daybreak == true then
    --    position['y'] = 3
        takeobj('CrisisCards (D)','Null',position,rotation,CrisisCardsBag)
        if selectedexodus.CylonFleet ~= true then
            takeobj('CrisisCards (DCAG)','Null',position,rotation,CrisisCardsBag)
        end
    end


    if selectedexpansion.Exodus == true then
    --    position['y'] = 4
        takeobj('CrisisCards (E)','Null',position,rotation,CrisisCardsBag)
        if selectedexodus.CylonFleet == true then
    --        position['y'] = 5
            takeobj('CrisisCards (ECAG)','Null',position,rotation,CrisisCardsBag)
        else
            takeobj('CrisisCards (BCAG)','Null',position,rotation,CrisisCardsBag)
        end
    else
        takeobj('CrisisCards (BCAG)','Null',position,rotation,CrisisCardsBag)
    end
end

function BuildDestination()

    local position = {}
    position['x'] = -13
    position['y'] = 1
    position['z'] = 19
    local rotation = {180 , 0,  0}

    takeobj('Destination (B)','Null',position,rotation,DestinationsBag)
    if selectedexpansion.Pegasus == true then
        position['y'] = 2
        takeobj('Destination (P)','Null',position,rotation,DestinationsBag)
        if selectedexodus.CylonFleet == false then
            takeobj('Mining (P)','Null',position,rotation,DestinationsBag)
        end
    end
    if selectedexpansion.Exodus == true then
        position['y'] = 3
        takeobj('Destination (E)','Null',position,rotation,DestinationsBag)
    end

    position['x'] = -16
    rotation = {0 , 180,  0}
    takeobj(Objectives[selectedobjective],'Null',position,rotation,TQMOBag)
end

function BuildTPLTPE()

    -- Unhide boards
    local obj = getObjectFromGUID(bigcardsboard)
    local pos = obj.getPosition()
    pos.y = 0.9
    obj.setPosition({pos.x, pos.y, pos.z})

    obj = getObjectFromGUID(smallsideboard)
    pos = obj.getPosition()
    pos.y = 0.9
    obj.setPosition({pos.x, pos.y, pos.z})

    local position = {}
    position['x'] = -8.7
    position['y'] = 1
    position['z'] = -20
    local rotation = {180 , 0,  0}

    takeobj('Politics (B)','Null',position,rotation,TPLTPEBag)
    if selectedexpansion.Pegasus == true then
        position['y'] = 2
        takeobj('IC (P)','Null',position,rotation,TPLTPEBag)
        position['y'] = 3
        takeobj('Politics (P)','Null',position,rotation,TPLTPEBag)
    else
        position['y'] = 2
        takeobj('IC (B)','Null',position,rotation,TPLTPEBag)
    end
    if selectedexpansion.Daybreak == true then
        position['y'] = 4
        takeobj('Politics (D)','Null',position,rotation,TPLTPEBag)
    end
    if selectedexpansion.Exodus == true then
        position['y'] = 5
        takeobj('Politics (E)','Null',position,rotation,TPLTPEBag)
    end

    local position = {}
    position['x'] = -3.85
    position['y'] = 1
    position['z'] = -20
    local rotation = {180 , 0,  0}

    takeobj('Leadership (B)','Null',position,rotation,TPLTPEBag)
    if selectedexpansion.Pegasus == true then
        position['y'] = 2
        takeobj('Leadership (P)','Null',position,rotation,TPLTPEBag)
    end
    if selectedexpansion.Daybreak == true then
        position['y'] = 3
        takeobj('Leadership (D)','Null',position,rotation,TPLTPEBag)
    end
    if selectedexpansion.Exodus == true then
        position['y'] = 4
        takeobj('Leadership (E)','Null',position,rotation,TPLTPEBag)
    end

    local position = {}
    position['x'] = 1
    position['y'] = 1
    position['z'] = -20
    local rotation = {180 , 0,  0}

    takeobj('Tactics (B)','Null',position,rotation,TPLTPEBag)
    if selectedexpansion.Pegasus == true then
        position['y'] = 2
        takeobj('Tactics (P)','Null',position,rotation,TPLTPEBag)
    end
    if selectedexpansion.Daybreak == true then
        position['y'] = 3
        takeobj('Tactics (D)','Null',position,rotation,TPLTPEBag)
    end
    if selectedexpansion.Exodus == true then
        position['y'] = 4
        takeobj('Tactics (E)','Null',position,rotation,TPLTPEBag)
    end

    local position = {}
    position['x'] = 5.65
    position['y'] = 1
    position['z'] = -20
    local rotation = {180 , 0,  0}

    takeobj('Piloting (B)','Null',position,rotation,TPLTPEBag)
    if selectedexpansion.Pegasus == true then
        position['y'] = 2
        takeobj('Piloting (P)','Null',position,rotation,TPLTPEBag)
    end
    if selectedexpansion.Daybreak == true then
        position['y'] = 3
        takeobj('Piloting (D)','Null',position,rotation,TPLTPEBag)
    end
    if selectedexpansion.Exodus == true then
        position['y'] = 4
        takeobj('Piloting (E)','Null',position,rotation,TPLTPEBag)
    end

    local position = {}
    position['x'] = 10.4
    position['y'] = 1
    position['z'] = -20
    local rotation = {180 , 0,  0}

    takeobj('Engineering (B)','Null',position,rotation,TPLTPEBag)
    if selectedexpansion.Pegasus == true then
        position['y'] = 2
        takeobj('Engineering (P)','Null',position,rotation,TPLTPEBag)
    end
    if selectedexpansion.Daybreak == true then
        position['y'] = 3
        takeobj('Engineering (D)','Null',position,rotation,TPLTPEBag)
    end
    if selectedexpansion.Exodus == true then
        position['y'] = 4
        takeobj('Engineering (E)','Null',position,rotation,TPLTPEBag)
    end

    local position = {}
    position['x'] = -13.6
    position['y'] = 1
    position['z'] = -20
    local rotation = {180 , 0,  0}

    if selectedexpansion.Pegasus == true then
            Title = 'Treachery (P)'
    end

    if selectedexpansion.Daybreak == true then
            Title = 'Treachery (D)'
    end

    takeobj(Title,'Null',position,rotation,TPLTPEBag)

end

function IsCylonLeaderPlaying()
    for _,p in ipairs(PlayerTable) do
        if NCharData[p.Object.getName()][1] == 'Cylon Leader' then
            return true, p
        end
    end
    return false
end

function LoyaltyDeck()
    local LoyaltyCylonBagObj = getObjectFromGUID(LoyaltyCylonBag)
    local LoyaltyHumanBagObj = getObjectFromGUID(LoyaltyHumanBag)
    --print("Shuffle Human / Cylon Loyalty Cards")
    LoyaltyCylonBagObj.shuffle()
    LoyaltyHumanBagObj.shuffle()
    local specialcyloncard = false

    local totalhuman = 0
    local totalcylon = 0

    local CylonLeaderPlaying = IsCylonLeaderPlaying()

    if #PlayerTable == 3 then
        totalcylon = 1
        totalhuman = 5
    elseif #PlayerTable == 4 then
        if CylonLeaderPlaying == false then
            totalcylon = 1
            totalhuman = 6
            specialcyloncard = true
        else
            totalcylon = 1
            totalhuman = 5
        end
    elseif #PlayerTable == 5 then
        if CylonLeaderPlaying == false then
            totalcylon = 2
            totalhuman = 8
        else
            totalcylon = 1
            totalhuman = 7
            if selectedexpansion.Daybreak == true then
                specialcyloncard = true
                totalhuman = 6
            end
        end
    elseif #PlayerTable == 6 then
        if CylonLeaderPlaying == false then
            totalcylon = 2
            totalhuman = 9
            specialcyloncard = true
        else
            totalcylon = 2
            totalhuman = 8
        end
    elseif #PlayerTable == 7 then
        if CylonLeaderPlaying == false then
            sendMessage('Error - You always need a cylon leader in 7 player games.','Red')
            return
        end
        totalcylon = 2
        totalhuman = 10
        if selectedexpansion.Daybreak == true then
            specialcyloncard = true
            totalhuman = 9
        end
    end

    printToAll('Building Loyalty Deck',{1,1,1})
    if selectedexpansion.Daybreak == true and specialcyloncard == true then
        --daybreak specialcyloncard is mutineer which requires extra card
        printToAll('- Adding extra loyalty for Mutineer',{1,1,1})
        totalhuman = totalhuman + 1
    end

    if selectedexpansion.Exodus == true then
        --for exodus
        printToAll('- Adding extra loyalty for Exodus',{1,1,1})
        totalhuman = totalhuman + 1
    end

    -- Characters with extra loyalty cards
    for y, test in ipairs(PlayerTable) do
        if NCharData[test.Object.getName()][9] == true then
            printToAll('- Adding extra loyalty for '..test.Object.getName(),{1,1,1})
            totalhuman = totalhuman + 1
        end
    end

    printToAll('- Human Loyalty Cards: '.. totalhuman,{1,1,1})
    printToAll('- Cylon Loyalty Cards: '.. totalcylon,{1,1,1})
    do
        local num_special = specialcyloncard and 1 or 0
        printToAll('- Special Loyalty Cards: '.. tostring(num_special),{1,1,1})
    end

    local position = {}
    position['x'] = 0
    position['y'] = 2
    position['z'] = 19
    local rotation = {180 , 0,  0}

    local params = {}
    params.position = position
    params.rotation = rotation
    params.index = 1
    params.callback_owner = Global

    local extra_human_position = {}
    extra_human_position['x'] = 0
    extra_human_position['y'] = 2
    extra_human_position['z'] = 23.5

    local extra_human_params = {}
    extra_human_params.position = extra_human_position
    extra_human_params.rotation = {0,90,180}
    extra_human_params.index = 1
    extra_human_params.callback_owner = Global

    local remaining_yanac_cards = 11

    if selectedexpansion.Pegasus == true then
        remaining_yanac_cards = remaining_yanac_cards + 1
    end

    if selectedexpansion.Exodus == true then
        remaining_yanac_cards = remaining_yanac_cards + 5
    end

    if selectedexpansion.Daybreak == true then
        remaining_yanac_cards = remaining_yanac_cards + 1
    end

    local cards = 0
    local card_list = LoyaltyHumanBagObj.getObjects()

    for i, object in ipairs(card_list) do
        allow = false
        if selectedexodus.FinalFive == true and object.name == 'FinalFive' then
            allow = true
        elseif selectedexodus.PersonalGoals == true and object.name == 'PersonalGoal' then
            allow = true
        elseif object.name == 'Card' and remaining_yanac_cards > 0 then
            allow = true
            remaining_yanac_cards = remaining_yanac_cards - 1
        end

        if allow == true then
            if cards < totalhuman then
                cards = cards + 1
                params.guid = object.guid
                LoyaltyHumanBagObj.takeObject(params)
            elseif selectedexpansion.Exodus == true then
                extra_human_params.guid = object.guid
                LoyaltyHumanBagObj.takeObject(extra_human_params)
            end
        end
    end

    cards = 0
    for i, object in ipairs(LoyaltyCylonBagObj.getObjects()) do
        if cards >= totalcylon then
            break
        end
        allow = false
        if selectedexpansion.Pegasus == true and object.name == 'Pegasus' then
            allow = true
        elseif selectedexpansion.Exodus == true and object.name == 'Exodus' then
            allow = true
        elseif object.name == 'Card' then
            allow = true
        end

        if allow == true then
            params.guid = object.guid
            cards = cards + 1
            LoyaltyCylonBagObj.takeObject(params)
        end

    end

    if specialcyloncard == true then
        if selectedexpansion.Daybreak == true then
            -- Mutineer card goes into loyalty deck right away
            takeobj('Mutineer','Null',position,{0,180,180},LoyaltySpecialBag)
        elseif selectedpegasus.SympatheticCylon == true then
            position['x'] = 2.75
            takeobj('SympatheticCylon','Null',position,{180,0,180},LoyaltySpecialBag)
            position['x'] = 5.25
            takeobj('Infiltration','Null',position,{0,180,0},TQMOBag)
            local AgendaCards = 'SympatheticAgenda'
            if selectedpegasus.UseMotives == true then
                AgendaCards = 'CylonMotives'
            end
            position['x'] = 7.75
            takeobj(AgendaCards,'Null',position,{0,180,0},TQMOBag,'Flip')
        else
            position['x'] = 2.75
            takeobj('SympathizerCylon','Null',position,{180,0,180},LoyaltySpecialBag)
        end
    end

end


function takeobj(Name,PlayerColor,pos,rot,bagguid,action)
    bag = getObjectFromGUID(bagguid)
    for i, object in ipairs(bag.getObjects()) do
        if object["name"] == Name  then
            local params = {}
            params.position = pos
            params.rotation = rot
            params.guid = object["guid"]
            if action == 'Lock' then
                params.callback = 'lock'
            elseif action == 'Shuffle' then
                params.callback = 'shuffle'
            elseif action == 'Tint' then
                params.callback = 'setTintColorAndScale'
            elseif action == 'Civs' then
                params.callback = 'civs'
            elseif action == 'Flip' then
                params.callback = 'flip'
            elseif action == 'ClearNameAndLock' then
                params.callback = 'ClearNameAndLock'
            elseif action == 'GUID' then
            elseif action ~= nil then
                params.callback = action
            end
            params.callback_owner = Global
            local callback_params = {}
            callback_params['color'] = PlayerColor
            params.params = callback_params
            bag.takeObject(params)
            if action == 'Tint' or action == 'GUID' then
                return object["guid"]
            end
            return
        end
    end
    if action == 'Tint' or action == 'GUID' then
        return 0
    end
end
-------------------------------------------------------------

function shuffle(object, params)
    object.shuffle()
end
function lock(object, params)
    object.lock()
end
function flip(object, params)
    object.flip()
end


function civs(object, params)
    object.shuffle()
    params.position = {15,2,-3.6}
    params.callback_owner = Global
    params.index = 1
    object.takeObject(params)
    params.position = {15,2,-7.6}
    object.takeObject(params)
end

function setTintColorAndScale(object, params)
    local tint_color = stringColorToRGB(params.color)
    -- If color is pure white then sometimes the die does not transmit the color to clients
    if params.color == 'White' then
        tint_color.r = 0.999
        tint_color.g = 0.999
        tint_color.b = 0.999
    end
    object.setColorTint(tint_color)
    object.scale(0.75)
end

function setTintColor(object, params)
    local tint_color = stringColorToRGB(params.color)
    -- If color is pure white then sometimes the die does not transmit the color to clients
    if params.color == 'White' then
        tint_color.r = 0.999
        tint_color.g = 0.999
        tint_color.b = 0.999
    end
    object.setColorTint(tint_color)
end

function ClearNameAndLock(object, params)
    object.setName('')
    object.lock()
end

function onload(saved_data)

    --print("Global onLoad started")

    PlayerTable = {}

    --This is the data that is used if no save exists
    --Think of it as default values
    fuelcount = STARTING_FUEL
    foodcount = STARTING_FOOD
    moralecount = STARTING_MORALE
    populationcount = STARTING_POPULATION

    selectedfirstplayer = 0

    JumpLocation = 0
    CylonJumpLocation = 0

    skillcheck_currentplayer = 0
    skillcheck_counter = 0
    skillcheck_state = SCStateEnum.startcheck
    skillcheck_destinybutton = true

    -- true broadcast all, false printtoall
    BroadCastMessage = false

    --First we check if there was information saved in this script yet
    if saved_data ~= "" then
        --If there is save data, first we convert the string back to a table
        local loaded_data = JSON.decode(saved_data)
        --Then we pull out data out of the table
        local PlayerLoadData = loaded_data["PlayerTable"]
        if PlayerLoadData ~= nil then
            --print("PlayerLoadData")
            --print_r(PlayerLoadData)
            local num_players = #PlayerLoadData
            for i=1,num_players,1 do
                local PlayerTableInfo={}
                if PlayerLoadData[i].Object ~= nil then
                    local obj = getObjectFromGUID(PlayerLoadData[i].Object)
                    PlayerTableInfo.Object = obj
                    obj.SetTable('Data',PlayerLoadData[i].Data)
                    spawnDrawCards(obj)
                end
                PlayerTableInfo.PlayerColor = PlayerLoadData[i].PlayerColor
                table.insert(PlayerTable,PlayerTableInfo)
            end
            --print("PlayerTable")
            --print_r(PlayerTable)
        end
        fuelcount = loaded_data["Fuel"]
        foodcount = loaded_data["Food"]
        moralecount = loaded_data["Morale"]
        populationcount = loaded_data["Pop"]

        selectedexpansion = loaded_data["Expansion"]
        selectedobjective = loaded_data["Objective"]
        selectedpegasus = loaded_data["Pegasus"]
        selecteddaybreak = loaded_data["Daybreak"]
        selectedexodus = loaded_data["Exodus"]
        selectedfirstplayer = loaded_data["FirstPlayer"]

        JumpLocation = loaded_data["Jump"]
        if (loaded_data["CylonJump"] ~= nil) then
            CylonJumpLocation = loaded_data["CylonJump"]
        end

        if (loaded_data["SCCurrentPlayer"] ~= nil) then
            skillcheck_startingplayer = loaded_data["SCStartingPlayer"]
            skillcheck_currentplayer = loaded_data["SCCurrentPlayer"]
            skillcheck_counter = loaded_data["SCCounter"]
            skillcheck_state = loaded_data["SCState"]
            skillcheck_destinybutton = loaded_data["SCDestiny"]
        end

        local settings = loaded_data["Settings"]
        BroadCastMessage = settings.BroadCastMessage
    end

    --print("Skill Check Values")
    --print(skillcheck_currentplayer)
    --print(skillcheck_counter)
    --print(skillcheck_state)
    --print(skillcheck_destinybutton)

    TQMOBag = '1b460b'
    TokenBag = '8769f3'
    LocationsBag = '2ddbff'
    LoyaltyCylonBag = '861938'
    LoyaltyHumanBag = 'd12fc6'
    LoyaltySpecialBag = 'e00db3'
    TPLTPEBag = '99659a'
    DestinationsBag = '028b53'
    CrisisCardsBag = '501808'
    SupercrisisCardsBag = '4c5dfc'
    Menu = '5e3f9f'
    ExtrasBag = '724f1b'
    CrisisBoard = '34274e'
    characterboard = '8ac057'
    bigcardsboard = '668860'
    smallsideboard = '8992e9'
    unusedcards = '4ee9fa'

    local CrisisBoardTrigger = '6e392b'

    if getObjectFromGUID(TQMOBag) ~= nil then
        getObjectFromGUID(TQMOBag).interactable = false
        getObjectFromGUID(LocationsBag).interactable = false
        getObjectFromGUID(LoyaltyCylonBag).interactable = false
        getObjectFromGUID(LoyaltyHumanBag).interactable = false
        getObjectFromGUID(LoyaltySpecialBag).interactable = false
        getObjectFromGUID(TPLTPEBag).interactable = false
        getObjectFromGUID(DestinationsBag).interactable = false
        getObjectFromGUID(CrisisCardsBag).interactable = false
        getObjectFromGUID(SupercrisisCardsBag).interactable = false
        getObjectFromGUID(ExtrasBag).interactable = false

        getObjectFromGUID(characterboard).interactable = false
        getObjectFromGUID(bigcardsboard).interactable = false
        getObjectFromGUID(smallsideboard).interactable = false

        getObjectFromGUID(unusedcards).interactable = false
        getObjectFromGUID(AdditionalComponentsBox).interactable = false
        getObjectFromGUID(DiscardBox).interactable = false
    end

    getObjectFromGUID(TokenBag).interactable = false
    getObjectFromGUID(PilotTokensBag).interactable = false
    getObjectFromGUID(CrisisBoard).interactable = false

    local CrisisBoardObj = getObjectFromGUID(CrisisBoard)
    if (CrisisBoardObj.getPosition()['y'] > 0) then
        --print("Creating Pass Button")
        CrisisBoardObj.createButton(PassButton)
    end

    local position = CrisisBoardObj.getPosition()
    local rotation = CrisisBoardObj.getRotation()
    SCBoardTriggerObj = getObjectFromGUID(CrisisBoardTrigger)
    SCBoardTriggerObj.setPositionSmooth({position[1],position[2] + 2.6 ,position[3]},false,true)
    SCBoardTriggerObj.setRotation(rotation)

    --print("Global onLoad ended")
end

function FindButton(object, c_function)
    local index = 0
    Buttons = object.getButtons()
    for i, button in ipairs(Buttons) do
        if button.click_function == c_function then
            index = button.index
        end
    end
    return Buttons, index
end


function FlipText(object, c_function, label)
    local button_parameters = {}
    local button, index = FindButton(object, c_function)
    local _, found = string.find(button[index + 1].label, '[X]')
    button_parameters.index = index
    if found == nil then
        button_parameters.label = '[X] ' .. label
        object.editButton(button_parameters)
        return true
    else
        button_parameters.label = '[ ] ' .. label
        object.editButton(button_parameters)
        return false
    end
end


function GenerateCharacterButtons()
    for i, object in ipairs(getAllObjects()) do
        if object.tag == 'Generic' and object.name == 'Custom_Model' and object.getDescription() ~= '' then
            object.createButton({label = object.getName(), click_function = 'CardButton', rotation = {0, 0, 0},
                                position = {0, 0.4, -3}, width = 4000, height = 550, font_size = 300})

            object.setVar('locked',false)
            object.setVar('picked',false)

            if selectedexpansion[NCharData[object.getName()][7]] == false then
                object.setVar('locked',true)
                object.setVar('picked',true)
                object.destruct()
            else
                if #PlayerTable < 4 and object.getDescription() == 'Cylon Leader' then
                    object.setVar('locked',true)
                    object.setVar('picked',true)
                    object.destruct()
                end
            end

        end
    end
end

function SetupNextCharacterPicker()
    if selectedfirstplayer > 0 then
        -- Remove Die because we have a first player
        if FirstPlayerDie ~= nil then
            FirstPlayerDie.destruct()
        end
        local color = PlayerTable[skillcheck_currentplayer].PlayerColor
        local steam_name = Player[color].steam_name
        if steam_name == nil then
            steam_name = color
        end
        local text = 'Player ' .. steam_name .. ' Is On Deck For Choosing Character'
        broadcastToAll(text, stringColorToRGB(color))
    else
        local text = 'First Player is On Deck For Choosing Character'
        broadcastToAll(text, stringColorToRGB('White'))
    end

    if selecteddebugmode == true then
        local autopick = false
        while autopick do
            local object = getAllObjects()[math.random(1,#getAllObjects())]
            if object.tag == 'Generic' and object.name == 'Custom_Model' and object.getDescription() ~= '' then
                if object.getVar('locked') == false and object.getVar('picked') == false then
                    CardButton(object, PlayerTable[skillcheck_currentplayer].PlayerColor)
                    break
                end
            end
        end
    end
end

--Counter for number of non-support characters, number of cylon leaders
local CharacterCounter = {NonSupportHuman=0, Cylon=0}

function UpdateUnpickedCharacters(type, name)

    local alt_name = ''

    if NCharData[name][8][1] == true then
        alt_name = NCharData[name][8][2]
    end

    local UnlockPass = false
    local OnlyCylonLeaders = false

    if #PlayerTable == 7 and CharacterCounter.Cylon == 0 and skillcheck_counter == 6 then
        OnlyCylonLeaders = true
    elseif CharacterCounter.NonSupportHuman == 3 and type ~= 'Support' and type ~= 'Cylon Leader' then
        UnlockPass = true
    end
    --print_r(type)
    --print_r(name)
    local unusedcharpos = {3.24, 0.77, 23.5}
    if skillcheck_counter == #PlayerTable then
        -- Move unused character bag
        getObjectFromGUID(unusedcards).setPosition(unusedcharpos)
        getObjectFromGUID(unusedcards).interactable = true
        unusedcharpos[2]=3.0
    end

    for i, object in ipairs(getAllObjects()) do
        if object.tag == 'Generic' and object.name == 'Custom_Model' then
            if UnlockPass and object.getDescription() ~= 'Cylon Leader' then
                object.setVar('locked',false)
            elseif OnlyCylonLeaders and object.getDescription() ~= 'Cylon Leader' then
                object.setVar('locked',true)
            elseif type ~= 'Support' and object.getDescription() == type then
                object.setVar('locked',true)
            end
            if alt_name == object.getName() then
                object.removeButton(0)
            end
            if skillcheck_counter == #PlayerTable and object.getVar('picked') == false then
                object.unlock()
                object.setPositionSmooth(unusedcharpos)
            end
        end
    end
end

function CardButton(object, playerColor)
    local name = Player[playerColor].steam_name
    if name == nil then
        name = playerColor
    end
    if object.getVar('replacement') ~= true then
        if selectedfirstplayer > 0 then
            if playerColor ~= PlayerTable[skillcheck_currentplayer].PlayerColor then
                broadcastToAll(name ..  ' it is not your turn!', playerColor)
                return
            end
        else
            for i, data in ipairs(PlayerTable) do
                if data.PlayerColor == playerColor then
                    selectedfirstplayer = i
                    skillcheck_currentplayer = i
                    break
                end
            end
        end
        if object.getVar('locked') == true then
            sendMessage(name ..  ' cannot pick another ' .. object.getDescription() .. ' at this time.', playerColor)
            return
        end
    end
    local playerHand = Player[playerColor].getPlayerHand()
    local HandRotation = {playerHand['rot_x'], playerHand['rot_y'] + 180, playerHand['rot_z']}
    local ctable = {}

    -- Set PlayerPosition
    for i, data in ipairs(PlayerTable) do
        if data.PlayerColor == playerColor then
            if data.Object ~= nil then
                sendMessage('Error - Cannot pick another character until the first is executed','Red')
                return
            end
            ctable["PlayerPosition"] = i
            break
        end
    end
    if ctable["PlayerPosition"] == nil then
        sendMessage('Error - Could not find player in the player table','Red')
        return
    end

    if object.getVar('replacement') == true then
        -- Set Tokens
        ctable["Token"]      = takeobj(object.getName(),playerColor,HandPositionObject(playerHand,6.73,-5),HandRotation,TokenBag,      'Tint')
        ctable["PilotToken"] = takeobj(object.getName(),playerColor,HandPositionObject(playerHand,5,   -5),HandRotation,PilotTokensBag,'GUID')
    else
        -- Tokens will be generated when game starts
        ctable["Token"]      = 0
        ctable["PilotToken"] = 0
    end

    object.removeButton(0)
    object.setVar('picked', true)
    object.setTable('Data', ctable)
    object.lock()
    object.setPosition(HandPositionObject(playerHand, 5, 0, 5, 0))
    object.setRotation(HandRotation)
    object.scale(2)

    AddToPlayerTable(ctable["PlayerPosition"],playerColor,object)
    spawnDrawCards(object)

    local characterType = NCharData[object.getName()][1]

    Notes(playerColor, object.getName(), characterType)

    if object.getVar('replacement') ~= true then
        if characterType == 'Cylon Leader' then
            CharacterCounter.Cylon = CharacterCounter.Cylon + 1
        elseif characterType ~= 'Support' then
            CharacterCounter.NonSupportHuman = CharacterCounter.NonSupportHuman + 1
        end
        UpdateUnpickedCharacters(characterType,object.getName())
        if skillcheck_counter == #PlayerTable then
            skillcheck_counter = 0
            skillcheck_currentplayer = 0
            BuildAPC()
        else
            skillcheck_counter = skillcheck_counter + 1
            skillcheck_currentplayer = skillcheck_currentplayer + 1
            if skillcheck_currentplayer > #PlayerTable then
                skillcheck_currentplayer = 1
            end
            SetupNextCharacterPicker()
        end
    end
end

function onObjectDropped(playerColor, object)
    if object.tag == 'Generic' and object.name == 'Custom_Model' and object.getDescription() ~= '' and object.getVar('picked') == nil then
            object.createButton({label = object.getName(), click_function = 'CardButton', rotation = {0, 0, 0},
                                position = {0, 0.4, -3}, width = 4000, height = 550, font_size = 300})
            object.setVar('locked',false)
            object.setVar('picked',false)
            object.setVar('replacement',true)
    end
end

function ExecutionOKTimeout(params)
    local button, index = FindButton(params.object, 'Execute')
    params.object.editButton({index = index, label = 'Execute', click_function = 'Execute'})
end

function Execute(object, playerColor)
    local data = object.getTable('Data')

    if PlayerTable[data.PlayerPosition].PlayerColor ~= playerColor then
        return
    end

    local timer_id = 'Execute' .. object.getGUID()

    if Timer.destroy(timer_id) == true then
        if #Player[playerColor].getHandObjects() == 0 then
            -- Remove from player table
            PlayerTable[data.PlayerPosition].Object = nil
            getObjectFromGUID(data["Token"]).destruct()
            if data["PilotToken"] ~= 0 then
                getObjectFromGUID(data["PilotToken"]).destruct()
            end
            sendMessage(object.getName() .. ' was executed!',playerColor)
            object.destruct()
        else
            local button, index = FindButton(object, 'Execute')
            object.editButton({index = index, label = 'Execute', click_function = 'Execute'})
            sendMessage('Please make sure your hand is completely empty before excuting and picking a new character.', playerColor)
        end
    else
        local button, index = FindButton(object, 'Execute')
        object.editButton({index = index, label = 'OK?', click_function = 'Execute'})
        params = {}
        params.object = object
        params.color = playerColor
        Timer.create({identifier = timer_id, function_name = 'ExecutionOKTimeout', parameters = params, delay = 1})
    end
end

function AddToPlayerTable(playerpos,color,object)
    local PlayerInfo = {}
    PlayerInfo.Object = object
    PlayerInfo.PlayerColor = color
    PlayerTable[playerpos] = PlayerInfo
    --[[
    print('Adding ' .. object.getName())
    print_r(PlayerTable)
    for i, pinfo in ipairs(PlayerTable) do
        if pinfo.Object ~= nil then
            print(tostring(i) .. '. ' .. pinfo.Object.getName())
        else
            print(tostring(i) .. '. nil')
        end
    end
    ]]--
end

function GetPlayerInfoForTitleHolder(Title)
    local SuccessionList={}
    for j=1,#PlayerTable,1 do
        local SuccessionEntry = {}
        local obj = PlayerTable[j].Object
        SuccessionEntry.Rank = NCharData[obj.getName()][Title+1]
        SuccessionEntry.Position = j
        table.insert(SuccessionList,SuccessionEntry)
    end
    table.sort(SuccessionList, function(a,b) return a.Rank < b.Rank end)
    return PlayerTable[SuccessionList[1].Position]
end

function BuildAPC()
    local Title = 'Admiral (B)'
    if selectedexodus.CylonFleet == true then
        Title = 'Admiral (E)'
    elseif selectedobjective == 'Pegasus' then
        Title = 'Admiral (P)'
    end

    local pinfo = GetPlayerInfoForTitleHolder(TitlesEnum.admiral)
    local playerHand = Player[pinfo.PlayerColor].getPlayerHand()
    local rotation = {playerHand['rot_x'], playerHand['rot_y'] + 180, playerHand['rot_z']}
    local position = HandPositionObject(playerHand, 10, 3, 10, 3)
    takeobj(Title,pinfo.PlayerColor,position,rotation,TQMOBag)
    position = HandPositionObject(playerHand, 10, 6, 10, 6)
    takeobj('Nuke1',pinfo.PlayerColor,position,rotation,TQMOBag)
    position = HandPositionObject(playerHand, 10, 8, 10, 8)
    takeobj('Nuke2',pinfo.PlayerColor,position,rotation,TQMOBag)

    Title = 'President (B)'
    if selectedobjective == 'Pegasus' then
        Title = 'President (P)'
    end

    pinfo = GetPlayerInfoForTitleHolder(TitlesEnum.president)
    playerHand = Player[pinfo.PlayerColor].getPlayerHand()
    rotation = {playerHand['rot_x'], playerHand['rot_y'] + 180, playerHand['rot_z']}
    position = HandPositionObject(playerHand, 10, -3, 10, -3)
    takeobj(Title,pinfo.PlayerColor,position,rotation,TQMOBag)
    position = HandPositionObject(playerHand, 10, -6, 10, -6)
    takeobj('Quorum (B)',pinfo.PlayerColor,position,rotation,TQMOBag,'Flip')
    if selectedexpansion.Pegasus == true then
        takeobj('Quorum (P)',pinfo.PlayerColor,position,rotation,TQMOBag,'Flip')
    end
    if selectedexpansion.Exodus == true then
        takeobj('Quorum (E)',pinfo.PlayerColor,position,rotation,TQMOBag,'Flip')
    end


    if selectedexodus.CylonFleet == true then
        pinfo = GetPlayerInfoForTitleHolder(TitlesEnum.cag)
        playerHand = Player[pinfo.PlayerColor].getPlayerHand()
        rotation = {playerHand['rot_x'], playerHand['rot_y'] + 180, playerHand['rot_z']}
        position = HandPositionObject(playerHand, 10, 0, 10, 0)
        takeobj('CAG',pinfo.PlayerColor,position,rotation,TQMOBag)
    end

    local CylonLeaderIsPlaying, CylonLeaderPlayerInfo = IsCylonLeaderPlaying()

    if CylonLeaderIsPlaying then
        playerHand = Player[CylonLeaderPlayerInfo.PlayerColor].getPlayerHand()
        rotation = {playerHand['rot_x'], playerHand['rot_y'] + 180, playerHand['rot_z']}
        position = HandPositionObject(playerHand, 10, 0, 10, 0)
        takeobj('Infiltration',CylonLeaderPlayerInfo.PlayerColor,position,rotation,TQMOBag)
        position = HandPositionObject(playerHand, 10, 3, 10, 3)
        Title = 'CylonMotives'
        if selectedpegasus.UseMotives == false and selectedexpansion.Daybreak == false then
            if #PlayerTable == 4 or #PlayerTable == 6 then
                Title = 'SympatheticAgenda'
            else
                Title = 'HostileAgenda'
            end
        end
        takeobj(Title,CylonLeaderPlayerInfo.PlayerColor,position,rotation,TQMOBag,'Flip')
    end

    getObjectFromGUID(characterboard).destruct()

    BuildTPLTPE()
    BuildDestination()
    LoyaltyDeck()
    BuildCrisisCards()
    BuildSupercrisisCards()
    SetupBoard()
    spawnships()
    spawnCharacterTokens()
    SpawnBoxes()

    local params = {}
    sendMessage('Will shuffle all decks in about 8 seconds, please wait', 'Yellow')
    Timer.create({identifier = 't3', function_name = 'ShuffleAll', parameters = params, delay = 8})

end

function SpawnBoxes()
    local obj = getObjectFromGUID(AdditionalComponentsBox)
    obj.interactable = true
    obj.unlock()
    obj.setPositionSmooth({-49.55, 2.65, 31.41},false,true)

    obj = getObjectFromGUID(DiscardBox)
    obj.interactable = true
    obj.unlock()
    obj.setPositionSmooth({49.55, 2.65, 31.41},false,true)
end

function PlaceCharacterTokens(PlayerColor, Object, PositionOffset)
    local playerHand = Player[PlayerColor].getPlayerHand()
    local data = Object.getTable('Data')
    local char_name = Object.getName()
    local location_name = NCharData[char_name][5]
    local char_pos = {LocationData[location_name][1][1],LocationData[location_name][1][2],LocationData[location_name][1][3]}
    local char_rot = {0,0,0}
    local pilot_pos = HandPositionObject(playerHand,5,-5)
    local pilot_rot = {playerHand['rot_x'], playerHand['rot_y'] + 180, playerHand['rot_z']}

    if selectedexpansion.Daybreak == true and LocationData[location_name].Daybreak ~= nil then
        char_pos = {LocationData[location_name].Daybreak[1],LocationData[location_name].Daybreak[2],LocationData[location_name].Daybreak[3]}
    elseif location_name == 'Stranded' or location_name == 'Launch' then
        -- Keep Character Tokens next to your Character card.
        if location_name == 'Launch' then
            -- Put pilot token out on board
            pilot_pos = char_pos
            pilot_rot = {0,180,0}
        end
        char_pos = HandPositionObject(playerHand, 6.73, -5)
        char_rot = {playerHand['rot_x'], playerHand['rot_y'] + 180, playerHand['rot_z']}
    end

    char_pos[1] = char_pos[1] + PositionOffset[1]
    char_pos[2] = char_pos[2] + PositionOffset[2]
    char_pos[3] = char_pos[3] + PositionOffset[3]

    --print(char_name)
    --print_r(char_pos)
    data.Token      = takeobj(char_name,PlayerColor,char_pos,char_rot,TokenBag,'Tint')
    data.PilotToken = takeobj(char_name,PlayerColor,pilot_pos,pilot_rot,PilotTokensBag,'GUID')
    Object.setTable('Data', data)
    local obj_parameters = {type='Die_8', position=HandPositionObject(playerHand, 3, -5), rotation=char_rot, scale={1.25,1.25,1.25}, callback='setTintColor', params={color=PlayerColor}}
    spawnObject(obj_parameters)
end

function spawnCharacterTokens()
    -- LocationStatusTable *Key = Location Name *Value = 1.Character Count, 2.Current Character Index
    local LocationStatusTable = {}
    for _, test in ipairs(PlayerTable) do
        local location_name = NCharData[test.Object.getName()][5]
        local ls = LocationStatusTable[location_name]
        local count = (ls and ls[1] or 0) + 1
        LocationStatusTable[location_name] = {count, count}
    end
    --print('LocationStatusTable:')
    --print_r(LocationStatusTable)
    for _, test in ipairs(PlayerTable) do
        local location_name = NCharData[test.Object.getName()][5]
        local ls = LocationStatusTable[location_name]
        local pos_offset = LocationOffsets[ls[1]][ls[2]]
        PlaceCharacterTokens(test.PlayerColor, test.Object, pos_offset)
        LocationStatusTable[location_name] = {ls[1], ls[2] - 1}
    end
end

function sendMessage(text, playerColor)
    if BroadCastMessage == false then
        printToAll(text, stringColorToRGB(playerColor))
    else
        broadcastToAll(text, stringColorToRGB(playerColor))
    end
end

function rgbToHex(rgb)
    -- converts red/green/blue to hex for tinting
	local hexadecimal = ''
	for key, value in pairs(rgb) do
        if key ~= 'a' then
            value = math.ceil(value * 255)
            local hex = ''
    		while (value > 0) do
                local index = (value % 16) + 1
                value = math.floor(value / 16)
    			hex = string.sub('0123456789ABCDEF', index, index) .. hex
    		end
    		if string.len(hex) == 0 then
    			hex = '00'
    		elseif string.len(hex) == 1 then
    			hex = '0' .. hex
    		end
    		hexadecimal = hexadecimal .. hex
        end
	end
    return hexadecimal
end

function HandPositionObject(Hand, forward, right)
    -- Hand = Player Hand
    local HPos = {}
    HPos[1] = Hand['pos_x'] + Hand['trigger_forward_x'] * forward + Hand['trigger_right_x'] * right
    HPos[2] = Hand['pos_y']
    HPos[3] = Hand['pos_z'] + Hand['trigger_forward_z'] * forward + Hand['trigger_right_z'] * right
    return HPos
end

function Notes(playerColor, Character, Type)
    local note = getNotes()
    local name = Player[playerColor].steam_name
    if name == nil then
        name = playerColor
    end
    local msg = '[' .. rgbToHex(stringColorToRGB(playerColor)) .. ']' .. name .. ' = ' .. Character .. ' (' .. Type .. ')[-]\n'
    note = note .. msg
    setNotes(note)
end
